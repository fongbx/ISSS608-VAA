[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications homepage. In this website, you will find my coursework and exercises completed for this course."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this exercise, we will learn the basic principles and essential components of ggplot2, and gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#understand-grammer-of-graphics",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#understand-grammer-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "3.1 Understand Grammer of Graphics",
    "text": "3.1 Understand Grammer of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics. Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nggplot2 is an implementation of Grammar of Graphics. A short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\nReference: Hadley Wickham (2010) \"A layered grammar of graphics.\" Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: data",
    "text": "Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\nggplot() initialises a ggplot object and a blank canvas appears. The data argument defines the dataset to be used for plotting."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS))\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: geom",
    "text": "Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\nGeometric Objects: geom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nGeometric Objects: geom_dotplot()\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nNote: The y-scale is not very useful, in fact misleading.\nWe will modify the chart using the below two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL,         # removes y-axis label\n                     breaks=NULL)  # removes y-axis ticks\n\n\n\n\n\n\nGeometric Objects: geom_histogram()\nIn geom_histogram(), the default number of bins is 30.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nModify a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue colour, and\ncolour argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n\n\n\n\n\n\nModify a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n*Note: This approach can be used to change colour, fill and alpha of the geometric.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color='grey30')\n\n\n\n\n\n\nGeometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density()\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_density()\n\n\n\n\n\n\nGeometric Objects: geom_boxplot()\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot()\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nGeometric Objects: geom_violin()\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_violin()\n\n\n\n\n\n\nGeometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\ngeom objects can be combined\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(position='jitter',\n             size=0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot()\n\n\n\n\n\n\nWorking with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  stat_summary(geom='point',\n               fun='mean',\n               color='red',\n               size=4)\n\n\n\n\n\n\nWorking with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(stat='summary',\n             fun='mean',\n             color='red',\n             size=4)\n\n\n\n\n\n\nAdding a best fit curve on a scatterplot\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n*Note: The default method used is loess.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: Facets",
    "text": "Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\nWorking with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. The default will display the panels in a grid shape (in this case 3x3) but we can pass in the arguments of nrow and ncol for customisation. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nNote that facet_wrap() function will only produce plots for the combinations of variables that have values, which means it won’t produce any empty plots.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\nfacet_wrap(~ CLASS, nrow=2)\n\n\n\n\n\n\nWorking with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data. Compared with facet_wrap(), we cannot specify the nrow and ncol, and there would always be only one row or only one column.\nNote that the facet_grid() function will also produce a grid of plots for each combination of variables that you specify, even if some plots are empty.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out)\ncoord_flip(): a cartesian system with the x and y flipped\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot)\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps\n\n\nWorking with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\nChanging the x and y axis range\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixes both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: themes",
    "text": "Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\nWorking with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nBelow plots the horizontal bar chart using theme_classic().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nBelow plots the horizontal bar chart using theme_m().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 01",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv('data/Exam_data.csv')\n\nWe will now examine the data further.\n\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\nstr(exam_data)\n\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nThe variables CLASS, GENDER and RACE are currently character data format. We will change them to factor.\n\nexam_data$CLASS <- as.factor(exam_data$CLASS)\nexam_data$GENDER <- as.factor(exam_data$GENDER)\nexam_data$RACE <- as.factor(exam_data$RACE)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-1---working-with-theme",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-1---working-with-theme",
    "title": "In-class Exercise 01",
    "section": "Exercise 1 - Working with theme",
    "text": "Exercise 1 - Working with theme\nFor more information on adjusting the theme, refer here.\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill='lightblue', colour='lightblue',\n                                    size=0.5, linetype='solid'),\n    panel.grid.major = element_line(size=0.5, linetype='solid', colour='white'),\n    panel.grid.minor = element_line(size=0.5, linetype='solid', colour='white'))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2---designing-data-driven-graphics-for-analysis-i",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2---designing-data-driven-graphics-for-analysis-i",
    "title": "In-class Exercise 01",
    "section": "Exercise 2 - Designing Data-Driven Graphics for Analysis I",
    "text": "Exercise 2 - Designing Data-Driven Graphics for Analysis I\n\nOriginal DesignImproved Design\n\n\nIn the original chart, there are the following issues:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequency\nFor static graph, frequency values should be added to provide additional information\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nBelow is the makeover of the chart. There are a few ways to plot the same chart.\nAlternative 1 - Processing before plotting\n\nWe need to include stat='identity', which is basically telling ggplot2 you will provide the y-values for the barplot, rather than counting the aggregate number of rows for each x value, which is the default stat=count\n\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(count=n()) %>% \n  mutate(pct = round((count/sum(count))*100,1)) %>% # we can also use prop.table(count) to get pct\n  # if we do an arrange(desc(count)) before ggplot, there is no need for reorder below\n  ggplot(aes(x=reorder(RACE, desc(count)), y=count)) +\n    geom_bar(stat='identity') +\n    ylim(0,220) +\n    labs(x='Race', y='No. of\\nPupils') +\n    geom_text(aes(label=paste0(count, ', ', pct, '%'), vjust = -0.5)) +\n    theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 2 - Processing during plotting\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE, function(x) -length(x)))) + # if ascending order remove minus\n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 3 - Using forcats package\n\nlibrary(forcats)\n\nggplot(data=exam_data,\n       # for ascending order use fct_rev(fct_infreq(RACE))\n       aes(x = fct_infreq(RACE))) + \n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3---designing-data-driven-graphics-for-analysis-ii",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3---designing-data-driven-graphics-for-analysis-ii",
    "title": "In-class Exercise 01",
    "section": "Exercise 3 - Designing Data-Driven Graphics for Analysis II",
    "text": "Exercise 3 - Designing Data-Driven Graphics for Analysis II\n\nOriginal DesignImproved Design"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2---improving-design-i",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2---improving-design-i",
    "title": "In-class Exercise 01",
    "section": "Exercise 2 - Improving Design I",
    "text": "Exercise 2 - Improving Design I\n\nOriginal DesignImproved Design (Alt 1)Improved Design (Alt 2)Improved Design (Alt 3)\n\n\nIn the original chart, there are the following issues:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequency\nFor static graph, frequency values should be added to provide additional information\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nAlternative 1 - Processing before plotting\nWe need to include stat='identity', which is basically telling ggplot2 you will provide the y-values for the barplot, rather than counting the aggregate number of rows for each x value, which is the default stat=count\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(count=n()) %>% \n  mutate(pct = round((count/sum(count))*100,1)) %>% # we can also use prop.table(count) to get pct\n  # if we do an arrange(desc(count)) before ggplot, there is no need for reorder below\n  ggplot(aes(x=reorder(RACE, desc(count)), y=count)) +\n    geom_bar(stat='identity') +\n    ylim(0,220) +\n    labs(x='Race', y='No. of\\nPupils') +\n    geom_text(aes(label=paste0(count, ', ', pct, '%'), vjust = -0.5)) +\n    theme(axis.title.y=element_text(angle=0))\n\n\n\n\n\n\nAlternative 2 - Processing during plotting\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE, function(x) -length(x)))) + # if ascending order remove minus\n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\n\n\nAlternative 3 - Using forcats package\n\nlibrary(forcats)\n\nggplot(data=exam_data,\n       # for ascending order use fct_rev(fct_infreq(RACE))\n       aes(x = fct_infreq(RACE))) + \n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\n\n\n\n\nOriginal DesignImproved Design\n\n\nIn the original chart, there are the following issues:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequency\nFor static graph, frequency values should be added to provide additional information\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nBelow is the makeover of the chart. There are a few ways to plot the same chart.\nAlternative 1 - Processing before plotting\n\nWe need to include stat='identity', which is basically telling ggplot2 you will provide the y-values for the barplot, rather than counting the aggregate number of rows for each x value, which is the default stat=count\n\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(count=n()) %>% \n  mutate(pct = round((count/sum(count))*100,1)) %>% # we can also use prop.table(count) to get pct\n  # if we do an arrange(desc(count)) before ggplot, there is no need for reorder below\n  ggplot(aes(x=reorder(RACE, desc(count)), y=count)) +\n    geom_bar(stat='identity') +\n    ylim(0,220) +\n    labs(x='Race', y='No. of\\nPupils') +\n    geom_text(aes(label=paste0(count, ', ', pct, '%'), vjust = -0.5)) +\n    theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 2 - Processing during plotting\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE, function(x) -length(x)))) + # if ascending order remove minus\n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 3 - Using forcats package\n\nlibrary(forcats)\n\nggplot(data=exam_data,\n       # for ascending order use fct_rev(fct_infreq(RACE))\n       aes(x = fct_infreq(RACE))) + \n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3---improving-design-ii",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3---improving-design-ii",
    "title": "In-class Exercise 01",
    "section": "Exercise 3 - Improving Design II",
    "text": "Exercise 3 - Improving Design II\n\nOriginal DesignImproved Design"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-1",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-1",
    "title": "In-class Exercise 01",
    "section": "2.1 Exercise 1",
    "text": "2.1 Exercise 1\n\nOriginal DesignImproved Design\n\n\nWe can beautify the chart by adjusting the theme.\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nBelow is an example of how we can adjust the theme of the chart. Here, we will change the colours of plot panel background to light blue and the colour of grid lines to white.\nFor more information on adjusting the theme, refer here.\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill='lightblue', colour='lightblue',\n                                    size=0.5, linetype='solid'),\n    panel.grid.major = element_line(size=0.5, linetype='solid', colour='white'),\n    panel.grid.minor = element_line(size=0.5, linetype='solid', colour='white'))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2",
    "title": "In-class Exercise 01",
    "section": "2.2 Exercise 2",
    "text": "2.2 Exercise 2\n\nOriginal DesignImproved Design\n\n\nIn the original chart, there are the following issues:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequency\nFor static graph, frequency values should be added to provide additional information\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nBelow is the makeover of the chart. There are a few ways to plot the same chart.\nAlternative 1 - Processing before plotting\n\nWe need to include stat='identity', which is basically telling ggplot2 you will provide the y-values for the barplot, rather than counting the aggregate number of rows for each x value, which is the default stat=count\n\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(count=n()) %>% \n  mutate(pct = round((count/sum(count))*100,1)) %>% # we can also use prop.table(count) to get pct\n  # if we do an arrange(desc(count)) before ggplot, there is no need for reorder below\n  ggplot(aes(x=reorder(RACE, desc(count)), y=count)) +\n    geom_bar(stat='identity') +\n    ylim(0,220) +\n    labs(x='Race', y='No. of\\nPupils') +\n    geom_text(aes(label=paste0(count, ', ', pct, '%'), vjust = -0.5)) +\n    theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 2 - Processing during plotting\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE, function(x) -length(x)))) + # if ascending order remove minus\n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 3 - Using forcats package\n\nlibrary(forcats)\n\nggplot(data=exam_data,\n       # for ascending order use fct_rev(fct_infreq(RACE))\n       aes(x = fct_infreq(RACE))) + \n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3",
    "title": "In-class Exercise 01",
    "section": "2.3 Exercise 3",
    "text": "2.3 Exercise 3\n\nOriginal DesignImproved Design\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20)\n\n\n\n\n\n\nWe will improve the design with the following:\n\nAdding mean and median lines on the histogram plot\nChange fill colour and line colour\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20, color='black', fill='lightblue') +\n  geom_vline(xintercept=mean(exam_data$MATHS, na.rm=T),\n             color='red', linetype='dashed', size=1) +\n  geom_vline(xintercept=median(exam_data$MATHS, na.rm=T),\n             color='blue', linetype='dashed', size=1)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-4",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-4",
    "title": "In-class Exercise 01",
    "section": "2.4 Exercise 4",
    "text": "2.4 Exercise 4\n\nOriginal DesignImproved Design\n\n\nThe below histograms are not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\n\nggplot(data=exam_data,\n       aes(x=ENGLISH)) +\n  geom_histogram() +\n  facet_wrap(~ GENDER)\n\n\n\n\n\n\nWe will create a makeover as shown below. The background histograms show the distribution of English scores of all pupils.\n\nexam_data_wo_gender <- exam_data[,-3] # remove column 3\n\nggplot(data=exam_data,\n       aes(x=ENGLISH, fill=GENDER)) +\n  # first hist plots the background, second hist plots the foreground\n  geom_histogram(data=exam_data_wo_gender, fill='grey', alpha=0.5) +\n  geom_histogram(colour='black') +\n  facet_grid(~ GENDER) +\n  guides(fill=FALSE) + # removes the legend\n  theme_bw()"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-5",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-5",
    "title": "In-class Exercise 01",
    "section": "2.5 Exercise 5",
    "text": "2.5 Exercise 5\n\nOriginal DesignImproved Design\n\n\nThe original chart shows minimal information.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nWe will improve the design with the following:\n\nChanging to equal axis\nIncluding guides to inform where the passing grades are\n\n\nggplot(data=exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_vline(xintercept=50, linetype='dashed', colour='grey60',\n             size=1.5, alpha=0.8) +\n  geom_hline(yintercept=50, linetype='dashed', colour='grey60',\n             size=1.5, alpha=0.8) +\n  theme(aspect.ratio=1) # enables plot to be square-shaped"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-data",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-data",
    "title": "Hands-on Exercise 1",
    "section": "3.2 Element: Data",
    "text": "3.2 Element: Data\nLet us call the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\nggplot() initialises a ggplot object and a blank canvas appears. The data argument defines the dataset to be used for plotting."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-aesthetic-mappings",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "3.3 Element: Aesthetic mappings",
    "text": "3.3 Element: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS))\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-geom",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-geom",
    "title": "Hands-on Exercise 1",
    "section": "3.4 Element: Geom",
    "text": "3.4 Element: Geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator. For complete list, please refer to here.\n\n3.4.1 Geom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n3.4.2 Geom_dotplot()\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe y-scale is not very useful, in fact misleading.\n\n\nWe will modify the chart using the below two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL,         # removes y-axis label\n                     breaks=NULL)  # removes y-axis ticks\n\n\n\n\n\n\n3.4.3 Geom_histogram()\nIn geom_histogram(), the default number of bins is 30.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n3.4.4 Modify a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue colour, and\ncolour argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n\n\n\n\n\n\n3.4.5 Modify a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to change colour, fill and alpha of the geometric.\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color='grey30')\n\n\n\n\n\n\n3.4.6 Geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density()\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_density()\n\n\n\n\n\n\n3.4.7 Geom_boxplot()\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot()\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n3.4.8 Geom_violin()\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_violin()\n\n\n\n\n\n\n3.4.9 Geom_point()\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n3.4.10 Combining geom objects\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(position='jitter',\n             size=0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-stat",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-stat",
    "title": "Hands-on Exercise 1",
    "section": "3.5 Element: stat",
    "text": "3.5 Element: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n3.5.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot()\n\n\n\n\n\n\n3.5.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  stat_summary(geom='point',\n               fun='mean',\n               color='red',\n               size=4)\n\n\n\n\n\n\n3.5.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(stat='summary',\n             fun='mean',\n             color='red',\n             size=4)\n\n\n\n\n\n\n3.5.4 Adding a best fit curve on a scatterplot\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-facets",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-facets",
    "title": "Hands-on Exercise 1",
    "section": "3.6 Element: Facets",
    "text": "3.6 Element: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n3.6.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. The default will display the panels in a grid shape (in this case 3x3) but we can pass in the arguments of nrow and ncol for customisation. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe facet_wrap() function will only produce plots for the combinations of variables that have values, which means it won’t produce any empty plots.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\nfacet_wrap(~ CLASS, nrow=2)\n\n\n\n\n\n\n3.6.2 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data. Compared with facet_wrap(), we cannot specify the nrow and ncol, and there would always be only one row or only one column.\nThe facet_grid() function will also produce a grid of plots for each combination of variables that you specify, even if some plots are empty.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-coordinates",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "3.7 Element: Coordinates",
    "text": "3.7 Element: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out)\ncoord_flip(): a cartesian system with the x and y flipped\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot)\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps\n\n\n3.7.1 Working with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n3.7.2 Changing the x and y axis range\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\nThe code chunk below fixes both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-themes",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#element-themes",
    "title": "Hands-on Exercise 1",
    "section": "3.8 Element: Themes",
    "text": "3.8 Element: Themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n3.8.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nBelow plots the horizontal bar chart using theme_classic().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nBelow plots the horizontal bar chart using theme_m().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, we will learn to make further customisations to charts in ggplot2. We will also be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "2.1 Install and Launch R packages",
    "text": "2.1 Install and Launch R packages\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data",
    "title": "Hands-on Exercise 1",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nWe will import Exan_data.csv into the R environment using read_csv() function of readr package. The dataset comprises of year end examination grades of a cohort of Primary 3 students.\n\nexam_data <- read_csv('data/Exam_data.csv')\n\nWe will examine the imported data below.\n\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr>"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-launch-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 2",
    "section": "2.1 Install and Launch R packages",
    "text": "2.1 Install and Launch R packages\nIn this exercise, besides tidyverse, we will also explore other R packages as follows:\n\nFor annotations and highlighting:\n\nggrepel: provides geoms for ggplot2 to repel overlapping text labels\ngghighlight:\n\nFor themes:\n\nggthemes: provides some extra themes, geoms, and scales for ‘ggplot2’\nhrbrthemes: provides typography-centric themes and theme components for ggplot2\n\nFor multiple charts:\n\npatchwork: for preparing composite figures\ncowplot: for preparing publication-quality composite figures\ngridExtra: for combining multiple figures\n\n\nThe code chunk below will be used to check if these packages have been installed and to load them into our working R environment.\n\npacman:: p_load(tidyverse, ggrepel, gghighlight, ggthemes, hrbrthemes, patchwork, cowplot, gridExtra)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#import-data",
    "title": "Hands-on Exercise 2",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nWe will import Exam_data.csv into the R environment using read_csv() function of readr package. The dataset comprises of year end examination grades of a cohort of Primary 3 students.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel-for-annotations",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel-for-annotations",
    "title": "Hands-on Exercise 2",
    "section": "3.1 ggrepel for annotations",
    "text": "3.1 ggrepel for annotations\nOne of the challenges in plotting statistical graph is annotation, especially with large number of data points. Below is an example of a standard plot with annotations using ggplot2.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label() + # alternatively we can include aes(label=ID) under geom_label()\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe following functions in ggplot2 enable addition of text annotation to a plot:\n\ngeom_text(): adds text directly to the plot\ngeom_label(): draws a rectangle underneath the text, making it easier to read\nannotate(): useful for adding small text annotations at a particular location on the plot\nannotation_custom(): Adds static annotations that are the same in every panel\n\nFor more information, refer here.\n\n\nAlternatively, we can use R package ggrepel, which is an extension and provides geom for ggplot2 to repel overlapping text labels away from each other. We simply replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label_repel() +\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSome text labels will be discarded if they have too many overlaps. We can adjust the threshold by providing the max.overlaps argument to geom_text_repel() or geom_label_repel().\n\n\nThere might be cases when there are specific points that we wish to highlight and label. We can do so by passing in the separate data and adding the geom_text_repel() and geom_point() for this separate dataset.\n\n# in this example, we want to highlight the top students\nexam_data_to_label <- exam_data %>% \n  filter(MATHS > 90 & ENGLISH > 90)\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH)) +\n  geom_point(colour='grey', alpha=0.8) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label_repel(data=exam_data_to_label, aes(label=ID), max.overlaps=Inf) +\n  geom_point(data=exam_data_to_label, colour='red') +\n  ggtitle(\"English scores vs Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotations-ggrepel",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotations-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "3.1 Beyond ggplot2 Annotations: ggrepel",
    "text": "3.1 Beyond ggplot2 Annotations: ggrepel\nOne of the challenges in plotting statistical graph is annotation, especially with large number of data points. Below is an example of a standard plot with annotations using ggplot2.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label() + # alternatively we can include aes(label=ID) under geom_label()\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe following functions in ggplot2 enable addition of text annotation to a plot:\n\ngeom_text(): adds text directly to the plot\ngeom_label(): draws a rectangle underneath the text, making it easier to read\nannotate(): useful for adding small text annotations at a particular location on the plot\nannotation_custom(): Adds static annotations that are the same in every panel\n\nFor more information, refer here.\n\n\nAlternatively, we can use R package ggrepel, which is an extension and provides geom for ggplot2 to repel overlapping text labels away from each other. We simply replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label_repel() +\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSome text labels will be discarded if they have too many overlaps. We can adjust the threshold by providing the max.overlaps argument to geom_text_repel() or geom_label_repel().\n\n\nThere might be cases when there are specific points that we wish to highlight and label. We can do so by passing in the separate data and adding the geom_text_repel() and geom_point() for this separate dataset.\n\n# in this example, we want to highlight the top students\nexam_data_to_label <- exam_data %>% \n  filter(MATHS > 90 & ENGLISH > 90)\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH)) +\n  geom_point(colour='grey', alpha=0.8) +\n  geom_smooth(method=lm, size=0.5) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label_repel(data=exam_data_to_label, aes(label=ID),\n                   fontface='bold', max.overlaps=Inf) +\n  geom_point(data=exam_data_to_label, colour='red') +\n  ggtitle(\"English scores vs Maths scores for Primary 3\");"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "3.2 Beyond ggplot2 Themes",
    "text": "3.2 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nBelow is an example of a plot using the built-in theme: theme_gray().\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n3.2.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others. It also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\nBelow are some examples of the same plot in different ggthemes.\n\nEconomistFewWSJTufteExcelFiveThirtyEight\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_few()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_tufte()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_excel()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#section",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#section",
    "title": "Hands-on Exercise 2",
    "section": "3.3 ",
    "text": "3.3"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#annotations",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#annotations",
    "title": "Hands-on Exercise 2",
    "section": "3.1 Annotations",
    "text": "3.1 Annotations\n\n3.1.1 Using geom_text() and geom_label()\n\ngeom_text(): adds text directly to the plot\ngeom_label(): draws a rectangle underneath the text, making it easier to read\n\n\ngeom_textgeom_label\n\n\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_text() + # alternatively we can include aes(label=ID) under geom_label()\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label() + # alternatively we can include aes(label=ID) under geom_label()\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOthers useful arguments for geom_text() and geom_label() are:\n\nnudge_x and nudge_y: let you offset labels from their corresponding points. The function position_nudge() can be also used\nhjust and vjust can now be character vectors (ggplot2 v >= 2.0.0): “left”, “center”, “right”, “bottom”, “middle”, “top”. New options include “inward” and “outward” which align text towards and away from the center of the plot respectively.\nfontface: Change fontface. Allowed values : 1 (normal), 2 (bold), 3 (italic) and 4 (bold.italic).\n\n\n\n\n\n3.1.2 Using annotate() and annotation_custom()\n\nannotate(): useful for adding small text annotations at a particular location on the plot\nannotation_custom(): Adds static annotations that are the same in every panel\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey70') +\n  geom_vline(xintercept=mean(exam_data$MATHS),\n             colour='red', linetype='dashed', size=1) +\n  annotate(geom=\"text\", label=\"Mean\",\n           x=65, y=40, colour='red')\n\n\n\n\n\n\n3.1.3 Using ggrepel: Avoid overlapping of text labels\nAlternatively, we can use R package ggrepel, which is an extension and provides geom for ggplot2 to repel overlapping text labels away from each other. We simply replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label_repel() +\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSome text labels will be discarded if they have too many overlaps. We can adjust the threshold by providing the max.overlaps argument to geom_text_repel() or geom_label_repel().\n\n\nThere might be cases when there are specific points that we wish to highlight and label. We can do so by passing in the separate data and adding the geom_text_repel() and geom_point() for this separate dataset.\n\n# in this example, we want to highlight the top students\nexam_data_to_label <- exam_data %>% \n  filter(MATHS > 90 & ENGLISH > 90)\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH)) +\n  geom_point(colour='grey', alpha=0.8) +\n  geom_smooth(method=lm, size=0.5) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label_repel(data=exam_data_to_label, aes(label=ID),\n                   fontface='bold', max.overlaps=Inf) +\n  geom_point(data=exam_data_to_label, colour='red') +\n  ggtitle(\"English scores vs Maths scores for Primary 3\");"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#themes",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#themes",
    "title": "Hands-on Exercise 2",
    "section": "3.2 Themes",
    "text": "3.2 Themes\n\n3.2.1 Built-in Themes\nggplot2 comes with eight built-in themes: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nBelow is an example of a plot using the built-in theme: theme_gray().\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n3.2.2 Using ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others. It also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\nBelow are some examples of the same plot in different ggthemes.\n\nEconomistFewWSJTufteExcelFiveThirtyEight\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_few()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_tufte()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_excel()\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey90', colour='grey25', boundary=100) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\n3.2.3 Using hrbrthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used. The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\nIn the following example, the core theme: theme_ipsum (“ipsum” is Latin for “precise”) uses Arial Narrow, and we can customise the elements of the chart using the arguments inside the theme.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size=18, base_size=15, grid=\"Y\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18\nbase_size argument is used to increase the default axis label to 15\ngrid argument is used to remove the x-axis grid lines"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#arrange-multiple-charts",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#arrange-multiple-charts",
    "title": "Hands-on Exercise 2",
    "section": "3.3 Arrange Multiple Charts",
    "text": "3.3 Arrange Multiple Charts\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. First let us create three statistical charts below.\n\nPlot 1: Histogram of Maths score\nPlot 2: Histogram of English score\nPlot 3: Scatterplot of English score vs Maths score\n\n\nPlot 1Plot 2Plot 3\n\n\n\np1 <- ggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, boundary=100, colour='grey25', fill='grey90') +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle('Distribution of Maths score')\n\np1\n\n\n\n\n\n\n\np2 <- ggplot(data=exam_data, aes(x=ENGLISH)) +\n  geom_histogram(bins=20, boundary=100, colour='grey25', fill='grey90') +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle('Distribution of English score')\n\np2\n\n\n\n\n\n\n\np3 <- ggplot(data=exam_data, aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method='lm', size=0.5) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  ggtitle('English score vs Maths score for Primary 3')\n\np3\n\n\n\n\n\n\n\n\n3.3.1 Using patchwork\nPatchwork package has a very simple syntax where we can create layouts easily. Here’s the general syntax that combines:\n\n“+” for simple addition of the plots together\n“|” operator to place ggplot2 graphs beside each other\n“/” operator to stack the graphs on top of each other\n“()” operator the define the sequence of the plotting\n\nTo learn more about, refer to Plot Assembly and Elegant Graphics for Data Analysis.\n\n3.3.1.1 Combining two ggplot2 graphs\nWith patchwork loaded, we can easily combine two graphs using the following code chunk.\n\np1 + p2\n\n\n\n\n\n\n3.3.1.2 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to place ggplot2 graphs beside each other\n“/” operator to stack the graphs on top of each other\n“()” operator the define the sequence of the plotting\n\n\n((p1 / p2) | p3) &\n  theme(title=element_text(size=8, face='bold'))\n\n\n\n\n\n\n3.3.1.3 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\np123 <- ((p1 / p2) | p3) & theme(title=element_text(size=8, face='bold'))\np123 + plot_annotation(tag_levels=\"I\")\n\n\n\n\n\n\n3.3.1.4 Creating composite figures on top of each other\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, left=0.02, right=0.5,\n                   bottom=0.7, top=1)\n\n\n\n\n\n\n3.3.1.5 Creating a composite figure using patchwork and ggtheme\n\n((p1 / p2) | p3) &\n  theme_economist() +\n  theme(title=element_text(size=6, face='bold'))\n\n\n\n\n\n\n\n3.3.2 Using cowplot\nThe cowplot package, developed by Claus O. Wilke provides a publication-ready theme for ggplot2 and allows to combine multiple plots in the same figure.\n\n3.3.2.1 Creating quick plots using plot_grid()\n\nplot_grid(): Easily combines multiple plots\n\n\nplot_grid(p1, p2, p3,\n          labels=c(\"A\", \"B\", \"C\"),\n          ncol=2, nrow=2)\n\n\n\n\n\n\n3.3.2.2 Specifying plot positions using ggdraw() + draw_plot() + draw_plot_label()\n\nggdraw() + draw_plot() + draw_plot_label(): Place graphs at particular locations with a particular sizes\n\nggdraw(): Initialize an empty drawing canvas\ndraw_plot(): Places a plot somewhere onto the drawing canvas.\ndraw_plot_label(): Adds a plot label to the upper left corner of a graph. It can handle vectors of labels with associated coordinates\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, coordinates run from 0 to 1, and the point (0, 0) is in the lower left corner of the canvas.\n\n\n\nggdraw() +\n  draw_plot(p1, x=0, y=0.5, width=0.5, height=0.5) +\n  draw_plot(p2, x=0.5, y=0.5, width=0.5, height=0.5) +\n  draw_plot(p3, x=0, y=0, width=1, height=0.5) +\n  draw_plot_label(label=c(\"A\",\"B\",\"C\"),\n                  x=c(0,0.5,0), y=c(1,1,0.5), size=15)\n\n\n\n\n\n\n3.3.2.3 Saving plots using save_plot()\nUsually, we use ggsave() [in ggplot2 package] to save ggplots. However, when working with cowplot, the function save_plot() [in cowplot package] is preferred.\n\ncombined <- ggdraw() +\n  draw_plot(p1, x=0, y=0.5, width=0.5, height=0.5) +\n  draw_plot(p2, x=0.5, y=0.5, width=0.5, height=0.5) +\n  draw_plot(p3, x=0, y=0, width=1, height=0.5) +\n  draw_plot_label(label=c(\"A\",\"B\",\"C\"),\n                  x=c(0,0.5,0), y=c(1,1,0.5), size=15)\n\n# each individual subplot should have an aspect ratio of 1.8\nsave_plot(\"combined.pdf\", combined,\n          base_aspect_ratio=1.8)\n\n\n\n\n3.3.3 Using gridExtra\nThe function grid.arrange() [in the package gridExtra] is another solution for mixing multiple graphs. For more customisation and details, refer here.\n\n\n\n\n\n\nNote\n\n\n\nIn the R code below layout_matrix is a 2x2 matrix (2 columns and 2 rows). Here, we are specifying that the first row (from top) comprises of plot 1 and plot 2 for columns 1 and 2, whereas the second row contains plot 3 spanning the 2 columns.\n\n\n\ngrid.arrange(p1, p2, p3, ncol=2, nrow=2,\n             layout_matrix=rbind(c(1,2), c(3,3)))"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#annotations-and-highlights",
    "href": "Hands-on Ex/Hands-on_Ex02/Hands-on_Ex02.html#annotations-and-highlights",
    "title": "Hands-on Exercise 2",
    "section": "3.1 Annotations and Highlights",
    "text": "3.1 Annotations and Highlights\n\n3.1.1 Using geom_text() and geom_label()\n\ngeom_text(): adds text directly to the plot\ngeom_label(): draws a rectangle underneath the text, making it easier to read\n\n\ngeom_textgeom_label\n\n\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_text() + # alternatively we can include aes(label=ID) under geom_label()\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label() + # alternatively we can include aes(label=ID) under geom_label()\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOthers useful arguments for geom_text() and geom_label() are:\n\nnudge_x and nudge_y: let you offset labels from their corresponding points. The function position_nudge() can be also used\nhjust and vjust can now be character vectors (ggplot2 v >= 2.0.0): “left”, “center”, “right”, “bottom”, “middle”, “top”. New options include “inward” and “outward” which align text towards and away from the center of the plot respectively.\nfontface: Change fontface. Allowed values : 1 (normal), 2 (bold), 3 (italic) and 4 (bold.italic).\n\n\n\n\n\n3.1.2 Using annotate() and annotation_custom()\n\nannotate(): useful for adding small text annotations at a particular location on the plot\nannotation_custom(): Adds static annotations that are the same in every panel\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20, fill='grey70') +\n  geom_vline(xintercept=mean(exam_data$MATHS),\n             colour='red', linetype='dashed', size=1) +\n  annotate(geom=\"text\", label=\"Mean\",\n           x=65, y=40, colour='red')\n\n\n\n\n\n\n3.1.3 Using ggrepel: Avoid overlapping of text labels\nAlternatively, we can use R package ggrepel, which is an extension and provides geom for ggplot2 to repel overlapping text labels away from each other. We simply replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, label=ID)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label_repel() +\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSome text labels will be discarded if they have too many overlaps. We can adjust the threshold by providing the max.overlaps argument to geom_text_repel() or geom_label_repel().\n\n\nThere might be cases when there are specific points that we wish to highlight and label. We can do so by passing in the separate data and adding the geom_text_repel() and geom_point() for this separate dataset.\n\n# in this example, we want to highlight the top students\nexam_data_to_label <- exam_data %>% \n  filter(MATHS > 90 & ENGLISH > 90)\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH)) +\n  geom_point(colour='grey', alpha=0.8) +\n  geom_smooth(method=lm, size=0.5) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_label_repel(data=exam_data_to_label, aes(label=ID),\n                   fontface='bold', max.overlaps=Inf) +\n  geom_point(data=exam_data_to_label, colour='red') +\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\n\n\n3.1.4 Using gghighlight: highlight areas in our plot\nWith gghighlight, we can simply add the gghighlight() function to our plot with the conditions set to identify our subset.\nThe following code chunk shows a similar plot to the above but without the need to filter out and plot the data we wish to highlight separately.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH)) +\n  geom_point(colour = 'darkred', alpha=0.8) +\n  gghighlight(MATHS > 90 & ENGLISH > 90,\n              unhighlighted_colour = alpha(\"grey\", 0.4),\n              use_direct_label = T,\n              label_key = ID,\n              label_params = list(size = 4)) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3\")\n\n\n\n\nThe following is an example of gghighlight on bar charts.\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(avgmaths = round(mean(MATHS, na.rm=T),1)) %>% \n  ggplot(aes(x=RACE, y=avgmaths)) +\n  geom_bar(stat=\"identity\", fill=\"darkred\") +\n  geom_text(aes(label=avgmaths), vjust=-0.4) +\n  gghighlight(RACE==\"Others\") +\n  coord_cartesian(ylim=c(0, 100)) +\n  ggtitle(\"Highlight with labels for all categories\")\n\n\n\n\nIn the above plot, the labels appear for all categories. We can choose to hide text that we do not wish to highlight by moving geom_text() function after the gghighlight() function.\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(avgmaths = round(mean(MATHS, na.rm=T),1)) %>% \n  ggplot(aes(x=RACE, y=avgmaths)) +\n  geom_bar(stat=\"identity\", fill=\"darkred\") +\n  gghighlight(RACE==\"Others\") +\n  geom_text(aes(label=avgmaths), vjust=-0.4) +\n  coord_cartesian(ylim=c(0, 100)) +\n  ggtitle(\"Highlight with labels for highlighted category\")\n\n\n\n\nFor more examples on gghighlight, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-and-launch-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-and-launch-r-packages",
    "title": "Hands-on Exercise 3",
    "section": "2.1 Import and Launch R packages",
    "text": "2.1 Import and Launch R packages\nIn this exercise, we will launch and use the following packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will check, install and launch the packages.\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "title": "Hands-on Exercise 3",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nWe will import Exam_data.csv into our R environment and save it as a tibble data frame called exam_data.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#section",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#section",
    "title": "Hands-on Exercise 3",
    "section": "2.3 ",
    "text": "2.3"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-methods",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-methods",
    "title": "Hands-on Exercise 3",
    "section": "3.1 ggiraph methods",
    "text": "3.1 ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive. Interactivity is added to ggplot geometries, legends and theme elements, via the following aesthetics:\n\ntooltip: tooltips to be displayed when mouse is over elements.\nonclick: JavaScript function to be executed when elements are clicked.\ndata_id: id to be associated with elements (used for hover and click actions)\n\nFor more information on the function reference of ggiraph, refer here. GGiraph can also be used with shiny application.\n\n3.1.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph using ggiraph package. The code chunk consists of two parts. First, an ggplot object will be created, and an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Next, girafe() of ggiraph will be used to generate an interactive svg object to be displayed on an html page.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer over a data point of interest, the student’s ID will be displayed.\n\n\n\n3.1.1.1 Display multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. In the first three lines of codes in the code chunk, we create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field.\n\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\nClass = \", exam_data$CLASS\n))\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student's ID and Class will be displayed.\n\n\n\n\n3.1.1.2 Customise tooltip style\nThe code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; font-style:bold; color:black;\"\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(opts_tooltip(css = tooltip_css))\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer over a data point of interest, the student’s ID will be displayed. Notice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\nRefer to Customizing girafe animations to learn more about how to customise ggiraph objects.\n\n\n3.1.1.3 Display statistics on tooltip\nThe code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\np <- ggplot(data=exam_data, aes(x=RACE)) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(tooltip(y, ymax))),\n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, size = 0.2)\n\ngirafe(ggobj = p,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n3.1.2 Hover effect with data_id aesthetic\nThe code chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. Note that the default value of the hover css is hover_css = \"fill:orange;\".\n\n\n\n3.1.2.1 Styling hover effect"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3",
    "section": "3.1 Tooltip effect with tooltip aesthetic",
    "text": "3.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph using ggiraph package. The code chunk consists of two parts.\nFirst, an ggplot object will be created, and an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. For other plot types, there will similarly be a corresponding interactive version in ggiraph, e.g., geom_bar_interactive(), geom_histogram_interactive().\nNext, girafe() of ggiraph will be used to generate an interactive svg object to be displayed on an html page.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer over a data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nNote\n\n\n\nscale_y_continuous(NULL, breaks = NULL) sets the y-axis scale of a plot to be continuous without any specific breaks, meaning that the scale will be determined automatically based on the data in the plot.\nThe NULL argument is used to indicate that no specific scale is being set for the y-axis. Similarly, the breaks = NULL argument indicates that no specific tick marks or breaks are being set for the y-axis. This command is useful when we want to allow the plotting software to determine the most appropriate y-axis scale and tick marks based on the data being plotted.\n\n\n\n3.1.1 Display multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. In the first three lines of codes in the code chunk, we create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field.\n\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\nClass = \", exam_data$CLASS\n))\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n3.1.2 Customise tooltip style\nThe code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; font-style:bold; color:black;\"\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(css = tooltip_css)\n    )\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer over a data point of interest, the student’s ID will be displayed. Notice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\nRefer to Customizing girafe animations to learn more about how to customise ggiraph objects.\n\n\n3.1.3 Display statistics on tooltip\nThe code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\np <- ggplot(data=exam_data, aes(x=RACE)) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(tooltip(y, ymax))),\n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, size = 0.2)\n\ngirafe(ggobj = p,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3",
    "section": "3.2 Hover effect with data_id aesthetic",
    "text": "3.2 Hover effect with data_id aesthetic\nThe code chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. Note that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n3.2.1 Styling hover effect\nIn the code chunk below, css codes are used to change the hover highlighting effect. We can directly indicate the css customisation under options without separately creating a css variable like in the previous example.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    # determines effect on hover\n    opts_hover(css = \"fill: #202020;\"),\n    # determines effect on the rest of the geometries when one is hovered\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon hover. Note that the opacity of the rest of the geometries are reduced upon hover."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3",
    "section": "3.3 Click effect with onclick",
    "text": "3.3 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web. The code chunk below shown an example of onclick.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\", \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\", as.character(exam_data$ID))\n\np <- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)   \n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click. The click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-multiple-effects",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-multiple-effects",
    "title": "Hands-on Exercise 3",
    "section": "3.4 Combining multiple effects",
    "text": "3.4 Combining multiple effects\nThere are times when we want to combine different effects on the interactive statistical graph. The below code chunk shows an example where we combine the tooltip and hover effect.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )   \n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3",
    "section": "3.5 Coordinated multiple views with ggiraph",
    "text": "3.5 Coordinated multiple views with ggiraph\nWe can also implement coordinated multiple views in the interactive data visualisation.\nIn order to do so, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views. The data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data = exam_data, aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), # use patchwork\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3",
    "section": "4.1 Coordinated multiple views with plotly",
    "text": "4.1 Coordinated multiple views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\n\nNote that highlight_key() creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk\n\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd <- highlight_key(exam_data)\n\np1 <- ggplot(data = d, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\np2 <- ggplot(data = d, aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\nsubplot(ggplotly(p1), ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWhen we click on a data point of one of the scatterplot, the corresponding point on the other scatterplot is selected."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3",
    "section": "5.1 Interactive Data Table: DT package",
    "text": "5.1 Interactive Data Table: DT package\nThe R package DT provides an R interface to the JavaScript library DataTables. R data objects (matrices or data frames) can be displayed as tables on HTML pages, and DataTables provides filtering, pagination, sorting, and many other features in the tables.\n\nDT::datatable(exam_data, class = \"compact\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3",
    "section": "5.2 Linked Brushing: crosstalk method",
    "text": "5.2 Linked Brushing: crosstalk method\nUsing crosstalk method, we can create an object of class crosstalk::SharedData. When we pass the SharedData instance to two separate widgets, their selection state becomes linked.\n\nd <- highlight_key(exam_data)\n\np <- ggplot(d, aes(x = ENGLISH, y = MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\ngg <- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\nIf we create a separate SharedData object for each plot, even with the same underlying dataframe, the plots would not be linked.\nWe are not limited to linking only two plots, nor do we need to limit ourselves to the same type of widget. Any Crosstalk-compatible widget can be linked with any other."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "title": "Hands-on Exercise 3",
    "section": "6.1 ggiraph",
    "text": "6.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "title": "Hands-on Exercise 3",
    "section": "6.2 plotly for R",
    "text": "6.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#import-and-launch-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#import-and-launch-r-packages",
    "title": "Hands-on Exercise 3A",
    "section": "2.1 Import and Launch R packages",
    "text": "2.1 Import and Launch R packages\nIn this exercise, we will launch and use the following packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will check, install and launch the packages.\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#import-data",
    "title": "Hands-on Exercise 3A",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nWe will import Exam_data.csv into our R environment and save it as a tibble data frame called exam_data.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3A",
    "section": "3.1 Tooltip effect with tooltip aesthetic",
    "text": "3.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph using ggiraph package. The code chunk consists of two parts.\nFirst, an ggplot object will be created, and an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. For other plot types, there will similarly be a corresponding interactive version in ggiraph, e.g., geom_bar_interactive(), geom_histogram_interactive().\nNext, girafe() of ggiraph will be used to generate an interactive svg object to be displayed on an html page.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer over a data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nNote\n\n\n\nscale_y_continuous(NULL, breaks = NULL) sets the y-axis scale of a plot to be continuous without any specific breaks, meaning that the scale will be determined automatically based on the data in the plot.\nThe NULL argument is used to indicate that no specific scale is being set for the y-axis. Similarly, the breaks = NULL argument indicates that no specific tick marks or breaks are being set for the y-axis. This command is useful when we want to allow the plotting software to determine the most appropriate y-axis scale and tick marks based on the data being plotted.\n\n\n\n3.1.1 Display multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. In the first three lines of codes in the code chunk, we create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field.\n\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\nClass = \", exam_data$CLASS\n))\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n3.1.2 Customise tooltip style\nThe code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; font-style:bold; color:black;\"\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(css = tooltip_css)\n    )\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer over a data point of interest, the student’s ID will be displayed. Notice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\nRefer to Customizing girafe animations to learn more about how to customise ggiraph objects.\n\n\n3.1.3 Display statistics on tooltip\nThe code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\np <- ggplot(data=exam_data, aes(x=RACE)) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(tooltip(y, ymax))),\n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, size = 0.2)\n\ngirafe(ggobj = p,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3A",
    "section": "3.2 Hover effect with data_id aesthetic",
    "text": "3.2 Hover effect with data_id aesthetic\nThe code chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. Note that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n3.2.1 Styling hover effect\nIn the code chunk below, css codes are used to change the hover highlighting effect. We can directly indicate the css customisation under options without separately creating a css variable like in the previous example.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    # determines effect on hover\n    opts_hover(css = \"fill: #202020;\"),\n    # determines effect on the rest of the geometries when one is hovered\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon hover. Note that the opacity of the rest of the geometries are reduced upon hover."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#click-effect-with-onclick",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3A",
    "section": "3.3 Click effect with onclick",
    "text": "3.3 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web. The code chunk below shown an example of onclick.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\", \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\", as.character(exam_data$ID))\n\np <- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)   \n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click. The click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#combining-multiple-effects",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#combining-multiple-effects",
    "title": "Hands-on Exercise 3A",
    "section": "3.4 Combining multiple effects",
    "text": "3.4 Combining multiple effects\nThere are times when we want to combine different effects on the interactive statistical graph. The below code chunk shows an example where we combine the tooltip and hover effect.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )   \n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3A",
    "section": "3.5 Coordinated multiple views with ggiraph",
    "text": "3.5 Coordinated multiple views with ggiraph\nWe can also implement coordinated multiple views in the interactive data visualisation.\nIn order to do so, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views. The data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data = exam_data, aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), # use patchwork\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3A",
    "section": "4.1 Coordinated multiple views with plotly",
    "text": "4.1 Coordinated multiple views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\n\nNote that highlight_key() creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk\n\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd <- highlight_key(exam_data)\n\np1 <- ggplot(data = d, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\np2 <- ggplot(data = d, aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\nsubplot(ggplotly(p1), ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWhen we click on a data point of one of the scatterplot, the corresponding point on the other scatterplot is selected."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-table-dt-package",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3A",
    "section": "5.1 Interactive Data Table: DT package",
    "text": "5.1 Interactive Data Table: DT package\nThe R package DT provides an R interface to the JavaScript library DataTables. R data objects (matrices or data frames) can be displayed as tables on HTML pages, and DataTables provides filtering, pagination, sorting, and many other features in the tables.\n\nDT::datatable(exam_data, class = \"compact\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#linked-brushing-crosstalk-method",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3A",
    "section": "5.2 Linked Brushing: crosstalk method",
    "text": "5.2 Linked Brushing: crosstalk method\nUsing crosstalk method, we can create an object of class crosstalk::SharedData. When we pass the SharedData instance to two separate widgets, their selection state becomes linked.\n\nd <- highlight_key(exam_data)\n\np <- ggplot(d, aes(x = ENGLISH, y = MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\ngg <- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\nIf we create a separate SharedData object for each plot, even with the same underlying dataframe, the plots would not be linked.\nWe are not limited to linking only two plots, nor do we need to limit ourselves to the same type of widget. Any Crosstalk-compatible widget can be linked with any other."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#ggiraph",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#ggiraph",
    "title": "Hands-on Exercise 3A",
    "section": "6.1 ggiraph",
    "text": "6.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#plotly-for-r",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03A.html#plotly-for-r",
    "title": "Hands-on Exercise 3A",
    "section": "6.2 plotly for R",
    "text": "6.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it's important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore we start making animated graphs, we should first ask ourselves: Does it makes sense to go through the effort? If we are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic better than their static counterparts."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#import-and-load-the-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#import-and-load-the-r-packages",
    "title": "Hands-on Exercise 3B",
    "section": "2.1 Import and Load the R packages",
    "text": "2.1 Import and Load the R packages\nIn this exercise, we will use the following packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#import-data",
    "title": "Hands-on Exercise 3B",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncat_col <- c('Country', 'Continent')\n\nglobalpop <- read_xls('data/GlobalPopulation.xls', sheet = 'Data') %>% \n  mutate(across((cat_col), as.factor)) %>% \n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nacross of dplyr package is used to perform the same operation on multiple columns in a data set\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nWe will examine the imported data in further details.\n\nhead(globalpop)\n\n# A tibble: 6 × 6\n  Country      Year Young   Old Population Continent\n  <fct>       <int> <dbl> <dbl>      <dbl> <fct>    \n1 Afghanistan  1996  83.6   4.5     21560. Asia     \n2 Afghanistan  1998  84.1   4.5     22913. Asia     \n3 Afghanistan  2000  84.6   4.5     23898. Asia     \n4 Afghanistan  2002  85.1   4.5     25268. Asia     \n5 Afghanistan  2004  84.5   4.5     28514. Asia     \n6 Afghanistan  2006  84.3   4.6     31057  Asia     \n\n\n\nstr(globalpop)\n\ntibble [6,204 × 6] (S3: tbl_df/tbl/data.frame)\n $ Country   : Factor w/ 222 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ Year      : int [1:6204] 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 ...\n $ Young     : num [1:6204] 83.6 84.1 84.6 85.1 84.5 84.3 84.1 83.7 82.9 82.1 ...\n $ Old       : num [1:6204] 4.5 4.5 4.5 4.5 4.5 4.6 4.6 4.6 4.6 4.7 ...\n $ Population: num [1:6204] 21560 22913 23898 25268 28514 ...\n $ Continent : Factor w/ 6 levels \"Africa\",\"Asia\",..: 2 2 2 2 2 2 2 2 2 2 ..."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-a-static-population-bubble-plot",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3B",
    "section": "3.1 Building a static population bubble plot",
    "text": "3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalpop, aes(x = Old, y = Young,\n                      size = Population, colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) + # colours from gapminder\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-the-animated-bubble-plot",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3B",
    "section": "3.2 Building the animated bubble plot",
    "text": "3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalpop, aes(x = Old, y = Young,\n                      size = Population, colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) + # colours from gapminder\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3B",
    "section": "4.1 Building an animated bubble plot: ggplotly method",
    "text": "4.1 Building an animated bubble plot: ggplotly method\nTh code chunk below creates an animated bubble plot using ggplotly() method.\n\ngg <- ggplot(globalpop,\n            aes(x = Old, y = Young,\n                size = Population, colour = Country)) +\n  geom_point(aes(size = Population, frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3B",
    "section": "4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2 Building an animated bubble plot: plot_ly() method\nWe will create an animated bubble plot using plot_ly() method in the following code chunk.\n\nbp <- globalpop %>% \n  plot_ly(x = ~Old,\n          y = ~Young,\n          size = ~Population,\n          color = ~Continent,\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = 'text',\n          type = 'scatter',\n          mode = 'markers')\n\nbp"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#import-and-launch-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#import-and-launch-r-packages",
    "title": "Hands-on Exercise 3A",
    "section": "2.1 Import and Launch R packages",
    "text": "2.1 Import and Launch R packages\nIn this exercise, we will launch and use the following packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will check, install and launch the packages.\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#import-data",
    "title": "Hands-on Exercise 3A",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nWe will import Exam_data.csv into our R environment and save it as a tibble data frame called exam_data.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3A",
    "section": "3.1 Tooltip effect with tooltip aesthetic",
    "text": "3.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph using ggiraph package. The code chunk consists of two parts.\nFirst, an ggplot object will be created, and an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. For other plot types, there will similarly be a corresponding interactive version in ggiraph, e.g., geom_bar_interactive(), geom_histogram_interactive().\nNext, girafe() of ggiraph will be used to generate an interactive svg object to be displayed on an html page.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer over a data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nNote\n\n\n\nscale_y_continuous(NULL, breaks = NULL) sets the y-axis scale of a plot to be continuous without any specific breaks, meaning that the scale will be determined automatically based on the data in the plot.\nThe NULL argument is used to indicate that no specific scale is being set for the y-axis. Similarly, the breaks = NULL argument indicates that no specific tick marks or breaks are being set for the y-axis. This command is useful when we want to allow the plotting software to determine the most appropriate y-axis scale and tick marks based on the data being plotted.\n\n\n\n3.1.1 Display multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. In the first three lines of codes in the code chunk, we create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field.\n\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\nClass = \", exam_data$CLASS\n))\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n3.1.2 Customise tooltip style\nThe code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; font-style:bold; color:black;\"\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(css = tooltip_css)\n    )\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer over a data point of interest, the student’s ID will be displayed. Notice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\nRefer to Customizing girafe animations to learn more about how to customise ggiraph objects.\n\n\n3.1.3 Display statistics on tooltip\nThe code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\np <- ggplot(data=exam_data, aes(x=RACE)) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(tooltip(y, ymax))),\n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, size = 0.2)\n\ngirafe(ggobj = p,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3A",
    "section": "3.2 Hover effect with data_id aesthetic",
    "text": "3.2 Hover effect with data_id aesthetic\nThe code chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. Note that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n3.2.1 Styling hover effect\nIn the code chunk below, css codes are used to change the hover highlighting effect. We can directly indicate the css customisation under options without separately creating a css variable like in the previous example.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    # determines effect on hover\n    opts_hover(css = \"fill: #202020;\"),\n    # determines effect on the rest of the geometries when one is hovered\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon hover. Note that the opacity of the rest of the geometries are reduced upon hover."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#click-effect-with-onclick",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3A",
    "section": "3.3 Click effect with onclick",
    "text": "3.3 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web. The code chunk below shown an example of onclick.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\", \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\", as.character(exam_data$ID))\n\np <- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)   \n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click. The click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#combining-multiple-effects",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#combining-multiple-effects",
    "title": "Hands-on Exercise 3A",
    "section": "3.4 Combining multiple effects",
    "text": "3.4 Combining multiple effects\nThere are times when we want to combine different effects on the interactive statistical graph. The below code chunk shows an example where we combine the tooltip and hover effect.\n\np <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )   \n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3A",
    "section": "3.5 Coordinated multiple views with ggiraph",
    "text": "3.5 Coordinated multiple views with ggiraph\nWe can also implement coordinated multiple views in the interactive data visualisation.\nIn order to do so, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views. The data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data = exam_data, aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), # use patchwork\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3A",
    "section": "4.1 Coordinated multiple views with plotly",
    "text": "4.1 Coordinated multiple views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\n\nNote that highlight_key() creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk\n\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd <- highlight_key(exam_data)\n\np1 <- ggplot(data = d, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\np2 <- ggplot(data = d, aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\nsubplot(ggplotly(p1), ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nWhen we click on a data point of one of the scatterplot, the corresponding point on the other scatterplot is selected."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-table-dt-package",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3A",
    "section": "5.1 Interactive Data Table: DT package",
    "text": "5.1 Interactive Data Table: DT package\nThe R package DT provides an R interface to the JavaScript library DataTables. R data objects (matrices or data frames) can be displayed as tables on HTML pages, and DataTables provides filtering, pagination, sorting, and many other features in the tables.\n\nDT::datatable(exam_data, class = \"compact\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#linked-brushing-crosstalk-method",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3A",
    "section": "5.2 Linked Brushing: crosstalk method",
    "text": "5.2 Linked Brushing: crosstalk method\nUsing crosstalk method, we can create an object of class crosstalk::SharedData. When we pass the SharedData instance to two separate widgets, their selection state becomes linked.\n\nd <- highlight_key(exam_data)\n\np <- ggplot(d, aes(x = ENGLISH, y = MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100))\n\ngg <- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\nIf we create a separate SharedData object for each plot, even with the same underlying dataframe, the plots would not be linked.\nWe are not limited to linking only two plots, nor do we need to limit ourselves to the same type of widget. Any Crosstalk-compatible widget can be linked with any other."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#ggiraph",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#ggiraph",
    "title": "Hands-on Exercise 3A",
    "section": "6.1 ggiraph",
    "text": "6.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#plotly-for-r",
    "href": "Hands-on Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#plotly-for-r",
    "title": "Hands-on Exercise 3A",
    "section": "6.2 plotly for R",
    "text": "6.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html",
    "href": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore we start making animated graphs, we should first ask ourselves: Does it makes sense to go through the effort? If we are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic better than their static counterparts."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#import-and-load-the-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#import-and-load-the-r-packages",
    "title": "Hands-on Exercise 3B",
    "section": "2.1 Import and Load the R packages",
    "text": "2.1 Import and Load the R packages\nIn this exercise, we will use the following packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\nShow code\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#import-data",
    "title": "Hands-on Exercise 3B",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\n\nShow code\ncat_col <- c('Country', 'Continent')\n\nglobalpop <- read_xls('data/GlobalPopulation.xls', sheet = 'Data') %>% \n  mutate(across((cat_col), as.factor)) %>% \n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nacross of dplyr package is used to perform the same operation on multiple columns in a data set\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nWe will examine the imported data in further details.\n\n\nShow code\nhead(globalpop)\n\n\n# A tibble: 6 × 6\n  Country      Year Young   Old Population Continent\n  <fct>       <int> <dbl> <dbl>      <dbl> <fct>    \n1 Afghanistan  1996  83.6   4.5     21560. Asia     \n2 Afghanistan  1998  84.1   4.5     22913. Asia     \n3 Afghanistan  2000  84.6   4.5     23898. Asia     \n4 Afghanistan  2002  85.1   4.5     25268. Asia     \n5 Afghanistan  2004  84.5   4.5     28514. Asia     \n6 Afghanistan  2006  84.3   4.6     31057  Asia     \n\n\n\n\nShow code\nstr(globalpop)\n\n\ntibble [6,204 × 6] (S3: tbl_df/tbl/data.frame)\n $ Country   : Factor w/ 222 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ Year      : int [1:6204] 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 ...\n $ Young     : num [1:6204] 83.6 84.1 84.6 85.1 84.5 84.3 84.1 83.7 82.9 82.1 ...\n $ Old       : num [1:6204] 4.5 4.5 4.5 4.5 4.5 4.6 4.6 4.6 4.6 4.7 ...\n $ Population: num [1:6204] 21560 22913 23898 25268 28514 ...\n $ Continent : Factor w/ 6 levels \"Africa\",\"Asia\",..: 2 2 2 2 2 2 2 2 2 2 ..."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#building-a-static-population-bubble-plot",
    "href": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3B",
    "section": "3.1 Building a static population bubble plot",
    "text": "3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\nShow code\nggplot(globalpop, aes(x = Old, y = Young,\n                      size = Population, colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) + # colours from gapminder\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#building-the-animated-bubble-plot",
    "href": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3B",
    "section": "3.2 Building the animated bubble plot",
    "text": "3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nShow code\nggplot(globalpop, aes(x = Old, y = Young,\n                      size = Population, colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) + # colours from gapminder\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3B",
    "section": "4.1 Building an animated bubble plot: ggplotly method",
    "text": "4.1 Building an animated bubble plot: ggplotly method\nTh code chunk below creates an animated bubble plot using ggplotly() method.\n\n\nShow code\ngg <- ggplot(globalpop,\n            aes(x = Old, y = Young,\n                size = Population, colour = Country)) +\n  geom_point(aes(size = Population, frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3B",
    "section": "4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2 Building an animated bubble plot: plot_ly() method\nWe will create an animated bubble plot using plot_ly() method in the following code chunk.\n\n\nShow code\nbp <- globalpop %>% \n  plot_ly(x = ~Old,\n          y = ~Young,\n          size = ~Population,\n          color = ~Continent,\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = 'text',\n          type = 'scatter',\n          mode = 'markers')\n\nbp"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information;\nperformance package to visualise model diagnostics; and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#import-and-launch-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#import-and-launch-r-packages",
    "title": "Hands-on Exercise 4",
    "section": "2.1 Import and Launch R packages",
    "text": "2.1 Import and Launch R packages\nIn this exercise, we will launch and use the following packages:\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting.\n\nperformance provide utilities for computing indices of model quality and goodness of fit, enabling assessment of model quality for different kinds of models\nparameters provide utilities for processing the parameters of various statistical models, including the computation of p-values, CIs, Bayesian indices and other measures for a wide variety of models.\nseehelps users to utilise visualization for more informative, communicable, and well-rounded scientific reporting\n\n\npacman::p_load(tidyverse, readxl, ggstatsplot, performance, parameters, see)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#import-data",
    "title": "Hands-on Exercise 4",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nWe will import Exam_data.csv and ToyotaCorolla.xls into our R environment and save them as tibble data frames. These two datasets will be used in the following two sections respectively.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \"data\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats",
    "title": "Hands-on Exercise 4",
    "section": "3.1 One-sample test: gghistostats()",
    "text": "3.1 One-sample test: gghistostats()\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English Scores\"\n)\n\n\n\n\nIn this example, we are performing a hypothesis testing on whether the centrality measure of English score are different from the test.value “60”. We have also chosen to use the “Bayes” statistical approach. Using this approach, the default centrality parameter that will be computed is the Maximum a Posteriori (MAP) estimator, i.e., the \\(\\mu_{MAP}\\) of 74.74 is the most likely value of population mean based on the observed data and prior knowledge.\nThe Student’s t-test is run and the output formula shows the following:\n\nThe Bayes Factor \\(BF_{01}\\) is a measure used in Bayesian hypothesis testing to quantify the strength of evidence against the null hypothesis \\(H_0\\) in favour of the alternative hypothesis \\(H_1\\) . Specifically, \\(BF_{01}\\) represents the ratio of the posterior probability of the null hypothesis to the posterior probability of the alternative hypothesis.\nThe interpretation of the Bayes factor depends on its value. Here are some common interpretations:\n\n\\(BF_{01}\\) ≈ 1: The evidence is inconclusive or weak. The data does not strongly favour either the null hypothesis or the alternative hypothesis.\n\\(BF_{01}\\) > 1: There is evidence in favour of the null hypothesis. The data provides more support for the null hypothesis compared to the alternative hypothesis\n\\(BF_{01}\\) < 1: There is evidence in favour of the alternative hypothesis. The data provides more support for the alternative hypothesis compared to the null hypothesis\n\nWhen \\(log_e(BF_{01})\\) is negative, it indicates that \\(BF_{01}\\) is < 1 and that evidence is in favour of the alternative hypothesis. On the other hand, if positive, it indicates that \\(BF_{01}\\) is > 1 and that evidence is in favour of the null hypothesis. The larger the absolute value, the stronger the evidence\n\nFor more information relating to posterior distributions, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4",
    "section": "3.2 Two-sample mean test: ggbetweenstats()",
    "text": "3.2 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = \"nonparametric\",\n  messages = FALSE\n)\n\n\n\n\nIn this case, we are performing a hypothesis testing on whether the centrality measure of Maths scores between Females and Males are different. We have also chosen to use the “non-parametric” statistical approach. Using this approach, the default centrality parameter that will be computed is the median.\nThe Wilcoxon rank-sum test is run and the returned formula shows the test statistic and p-value etc. As p-value is 0.91 and more than our significance level of 0.05, we do not reject the null hypothesis. This means that there is insufficient evidence to suggest that the centrality measure (in this case median) of Maths scores between Females and Males are different."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-way-anova-test-ggbetweenstats",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-way-anova-test-ggbetweenstats",
    "title": "Hands-on Exercise 4",
    "section": "3.3 One-way ANOVA test: ggbetweenstats()",
    "text": "3.3 One-way ANOVA test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE,\n  y = ENGLISH,\n  type = \"parametric\",\n  mean.ci = TRUE,\n  pairwise.comparisons = TRUE,\n  pairwise.display = \"significant\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\nHere, we are performing a hypothesis testing on whether the centrality measure of English scores are different among the races. We have also chosen to use the “parametric” statistical approach. Using this approach, the default centrality parameter that will be computed is the mean.\nThe Fisher’s or Welch’s one-way ANOVA test is run and the output formula shows the value of the test statistic and p-value etc. As p-value is less than our significance level of 0.05, we reject the null hypothesis and there is sufficient evidence to suggest that that the centrality measure (in this case mean) of English scores are different among the races.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the types of centrality analyses, two-sample test, ANOVA tests and pairwise comparison tests available in ggbetweenstats, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#test-of-correlation-ggscatterstats",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4",
    "section": "3.4 Test of Correlation: ggscatterstats",
    "text": "3.4 Test of Correlation: ggscatterstats\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH\n)\n\n\n\n\nIn this case, we are performing a hypothesis testing on the correlation between English and Maths scores. Without specifying the type of test in our code, the default type is “parametric”, which uses the Pearson’s correlation coefficient test.\nThe formula returned shows the test statistic, the p-value and the Pearson’s correlation. As p-value is less than our significance level of 0.05, we reject the null hypothesis that the true population correlation coefficient between the two variables is equal to zero. In other words, there is sufficient evidence to conclude that the two variables are linearly correlated.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the types of correlation analyses available in ggscatterstats, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#test-of-association-dependence",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#test-of-association-dependence",
    "title": "Hands-on Exercise 4",
    "section": "3.5 Test of Association (Dependence)",
    "text": "3.5 Test of Association (Dependence)\nIn the code chunk below, the Maths scores is binned into a 4-class variables using cut().\n\nexam_data_binned <- exam_data %>% \n  mutate(MATHS_bins = cut(MATHS,\n                          breaks = c(0,60,75,85,100)))\n\nThe code chunk below uses ggbarstats() to build a visual for Significant Test of Association.\n\nggbarstats(\n  data = exam_data_binned,\n  x = MATHS_bins,\n  y = GENDER\n)\n\n\n\n\nHere, we are performing a hypothesis testing on whether there is association between MATHS_bins and GENDER. Without specifying the type of test in our code, the default type is “parametric”, which uses the Pearson’s chi-square test. The null hypothesis in this test assumes that the variables are independent, meaning that there is no association between them.\nThe formula returned shows the chi-squared test statistic (with degrees of freedom 3) and the p-value etc. As p-value is more than our significance level of 0.05, we do not reject the null hypothesis. There is insufficient evidence to suggest an association between MATHS_bins and GENDER.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the types of contingency table analyses available in ggbarstats, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#multiple-regression-model-using-lm",
    "href": "Hands-on Ex/Hands-on_Ex04/Hands-on_Ex04.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4",
    "section": "4.1 Multiple Regression Model using lm()",
    "text": "4.1 Multiple Regression Model using lm()\nThe code chunk below calibrates a multiple linear regression model using lm() of Base Stats in R.\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM +\n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n4.1.1 Model Diagnostic: Checking for Multicollinearity\nWe can use check_collinearity() of performance package to check for multicollinearity.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\nWe can further plot it using the code chunk below.\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n4.1.2 Model Diagnostic: Checking normality assumption\nWe can use check_normality() of performance package to check the normality assumption.\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n4.1.3 Model Diagnostic: Check model for homogeneity of variance\nWe can use check_heteroscedasticity() of performance package to check for homogeneity of variance.\n\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\n4.1.4 Model Diagnostic: Complete check\nWe can also perform the complete check using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n4.1.5 Visualising Regression Parameters: see method\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n4.1.6 Visualising Regression Parameters: ggcoedstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model\n\nggcoefstats(model1, output = \"plot\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information;\nperformance package to visualise model diagnostics; and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#import-and-launch-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#import-and-launch-r-packages",
    "title": "Hands-on Exercise 4A",
    "section": "2.1 Import and Launch R packages",
    "text": "2.1 Import and Launch R packages\nIn this exercise, we will launch and use the following packages:\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting.\n\nperformance provide utilities for computing indices of model quality and goodness of fit, enabling assessment of model quality for different kinds of models\nparameters provide utilities for processing the parameters of various statistical models, including the computation of p-values, CIs, Bayesian indices and other measures for a wide variety of models.\nseehelps users to utilise visualization for more informative, communicable, and well-rounded scientific reporting\n\n\npacman::p_load(tidyverse, readxl, ggstatsplot, performance, parameters, see)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#import-data",
    "title": "Hands-on Exercise 4A",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nWe will import Exam_data.csv and ToyotaCorolla.xls into our R environment and save them as tibble data frames. These two datasets will be used in the following two sections respectively.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \"data\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#one-sample-test-gghistostats",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#one-sample-test-gghistostats",
    "title": "Hands-on Exercise 4A",
    "section": "3.1 One-sample test: gghistostats()",
    "text": "3.1 One-sample test: gghistostats()\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English Scores\"\n)\n\n\n\n\nIn this example, we are performing a hypothesis testing on whether the centrality measure of English score are different from the test.value “60”. We have also chosen to use the “Bayes” statistical approach. Using this approach, the default centrality parameter that will be computed is the Maximum a Posteriori (MAP) estimator, i.e., the \\(\\mu_{MAP}\\) of 74.74 is the most likely value of population mean based on the observed data and prior knowledge.\nThe Student’s t-test is run and the output formula shows the following:\n\nThe Bayes Factor \\(BF_{01}\\) is a measure used in Bayesian hypothesis testing to quantify the strength of evidence against the null hypothesis \\(H_0\\) in favour of the alternative hypothesis \\(H_1\\) . Specifically, \\(BF_{01}\\) represents the ratio of the posterior probability of the null hypothesis to the posterior probability of the alternative hypothesis.\nThe interpretation of the Bayes factor depends on its value. Here are some common interpretations:\n\n\\(BF_{01}\\) ≈ 1: The evidence is inconclusive or weak. The data does not strongly favour either the null hypothesis or the alternative hypothesis.\n\\(BF_{01}\\) > 1: There is evidence in favour of the null hypothesis. The data provides more support for the null hypothesis compared to the alternative hypothesis\n\\(BF_{01}\\) < 1: There is evidence in favour of the alternative hypothesis. The data provides more support for the alternative hypothesis compared to the null hypothesis\n\nWhen \\(log_e(BF_{01})\\) is negative, it indicates that \\(BF_{01}\\) is < 1 and that evidence is in favour of the alternative hypothesis. On the other hand, if positive, it indicates that \\(BF_{01}\\) is > 1 and that evidence is in favour of the null hypothesis. The larger the absolute value, the stronger the evidence\n\nFor more information relating to posterior distributions, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4A",
    "section": "3.2 Two-sample mean test: ggbetweenstats()",
    "text": "3.2 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = \"nonparametric\",\n  messages = FALSE\n)\n\n\n\n\nIn this case, we are performing a hypothesis testing on whether the centrality measure of Maths scores between Females and Males are different. We have also chosen to use the “non-parametric” statistical approach. Using this approach, the default centrality parameter that will be computed is the median.\nThe Wilcoxon rank-sum test is run and the returned formula shows the test statistic and p-value etc. As p-value is 0.91 and more than our significance level of 0.05, we do not reject the null hypothesis. This means that there is insufficient evidence to suggest that the centrality measure (in this case median) of Maths scores between Females and Males are different.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the types of one-sample tests available in gghistostats, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#one-way-anova-test-ggbetweenstats",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#one-way-anova-test-ggbetweenstats",
    "title": "Hands-on Exercise 4A",
    "section": "3.3 One-way ANOVA test: ggbetweenstats()",
    "text": "3.3 One-way ANOVA test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE,\n  y = ENGLISH,\n  type = \"parametric\",\n  mean.ci = TRUE,\n  pairwise.comparisons = TRUE,\n  pairwise.display = \"significant\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\nHere, we are performing a hypothesis testing on whether the centrality measure of English scores are different among the races. We have also chosen to use the “parametric” statistical approach. Using this approach, the default centrality parameter that will be computed is the mean.\nThe Fisher’s or Welch’s one-way ANOVA test is run and the output formula shows the value of the test statistic and p-value etc. As p-value is less than our significance level of 0.05, we reject the null hypothesis and there is sufficient evidence to suggest that that the centrality measure (in this case mean) of English scores are different among the races.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the types of centrality analyses, two-sample test, ANOVA tests and pairwise comparison tests available in ggbetweenstats, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#test-of-correlation-ggscatterstats",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4A",
    "section": "3.4 Test of Correlation: ggscatterstats",
    "text": "3.4 Test of Correlation: ggscatterstats\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH\n)\n\n\n\n\nIn this case, we are performing a hypothesis testing on the correlation between English and Maths scores. Without specifying the type of test in our code, the default type is “parametric”, which uses the Pearson’s correlation coefficient test.\nThe formula returned shows the test statistic, the p-value and the Pearson’s correlation. As p-value is less than our significance level of 0.05, we reject the null hypothesis that the true population correlation coefficient between the two variables is equal to zero. In other words, there is sufficient evidence to conclude that the two variables are linearly correlated.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the types of correlation analyses available in ggscatterstats, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#test-of-association-dependence",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#test-of-association-dependence",
    "title": "Hands-on Exercise 4A",
    "section": "3.5 Test of Association (Dependence)",
    "text": "3.5 Test of Association (Dependence)\nIn the code chunk below, the Maths scores is binned into a 4-class variables using cut().\n\nexam_data_binned <- exam_data %>% \n  mutate(MATHS_bins = cut(MATHS,\n                          breaks = c(0,60,75,85,100)))\n\nThe code chunk below uses ggbarstats() to build a visual for Significant Test of Association.\n\nggbarstats(\n  data = exam_data_binned,\n  x = MATHS_bins,\n  y = GENDER\n)\n\n\n\n\nHere, we are performing a hypothesis testing on whether there is association between MATHS_bins and GENDER. Without specifying the type of test in our code, the default type is “parametric”, which uses the Pearson’s chi-square test. The null hypothesis in this test assumes that the variables are independent, meaning that there is no association between them.\nThe formula returned shows the chi-squared test statistic (with degrees of freedom 3) and the p-value etc. As p-value is more than our significance level of 0.05, we do not reject the null hypothesis. There is insufficient evidence to suggest an association between MATHS_bins and GENDER.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the types of contingency table analyses available in ggbarstats, refer here."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#multiple-regression-model-using-lm",
    "href": "Hands-on Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4A",
    "section": "4.1 Multiple Regression Model using lm()",
    "text": "4.1 Multiple Regression Model using lm()\nThe code chunk below calibrates a multiple linear regression model using lm() of Base Stats in R.\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM +\n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n4.1.1 Model Diagnostic: Checking for Multicollinearity\nWe can use check_collinearity() of performance package to check for multicollinearity.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\nWe can further plot it using the code chunk below.\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n4.1.2 Model Diagnostic: Checking normality assumption\nWe can use check_normality() of performance package to check the normality assumption.\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n4.1.3 Model Diagnostic: Check model for homogeneity of variance\nWe can use check_heteroscedasticity() of performance package to check for homogeneity of variance.\n\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\n4.1.4 Model Diagnostic: Complete check\nWe can also perform the complete check using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n4.1.5 Visualising Regression Parameters: see method\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n4.1.6 Visualising Regression Parameters: ggcoedstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model\n\nggcoefstats(model1, output = \"plot\")"
  },
  {
    "objectID": "In-class Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "rstatix - Provides a simple framework, coherent with the ‘tidyverse’ design philosophy, for performing basic statistical tests, including t-test, Wilcoxon test, ANOVA, Kruskal-Wallis and correlation analyses. The output of each test is automatically transformed into a tidy data frame to facilitate visualization (tibble format).\n\n\n\nShow code\npacman::p_load(rstatix, gt, patchwork, tidyverse, webshot2, png)\n\n\n\n\n\n\n\nShow code\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The objective of this exercise is to reveal the demographic and financial characteristics of the City of Engagement. Using appropriate analytical visualisations, the exercise aims to help city managers and planners of the City of Engagement explore the data for their usage.\nThe datasets used are the following:\n\nParticipants.csv - contains demographic information about the residents\nFinancialJournal.csv - contains information about financial transactions"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#import-r-packages",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#import-r-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1 Import R Packages",
    "text": "2.1 Import R Packages\nFor this exercise, we will be using the following packages:\n\ntidyverse - a collection of packages for data science and analysis, including packages for data import, wrangling and visualisation\nlubridate - for working with dates and timestamp\nggstatsplot -\nplotly\ngglorenz - for plotting of Lorenz Curves\n\nWe will use pacman::p_load to install (if the packages are not yet installed) and load the packages into the R environment in a single command.\n\npacman::p_load(tidyverse, lubridate, zoo, ggstatsplot, plotly, crosstalk, gglorenz, DescTools, wesanderson)"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nWe will read in the two datasets using read_csv() function from the readr package and store them as tibbles. A tibble is a modern, tidy data frame format in R which is designed to work better with the tidyverse package.\n\nparticipants <- read_csv(\"data/Participants.csv\")\nfinancial <- read_csv(\"data/FinancialJournal.csv\")"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#change-to-appropriate-data-format",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#change-to-appropriate-data-format",
    "title": "Take-home Exercise 1",
    "section": "3.1 Change to appropriate data format",
    "text": "3.1 Change to appropriate data format\nWe will first convert the variables into appropriate data format:\n\nParticipants dataset:\n\nConvert householdSize from numerical to factor using factor() as there are only three categories\nConvert educationalLevel and interestGroup from character to factor using factor() and setting the level as necessary using the level argument\n\nFinancialJournal dataset:\n\nConvert category from character to factor using factor()\n\n\n\n# Convert householdSize, educationalLevel and interestGroup to factor\nparticipants$householdSize <- factor(participants$householdSize)\nparticipants$educationLevel <- factor(participants$educationLevel, levels = c(\"Low\", \"HighSchoolOrCollege\", \"Bachelors\", \"Graduate\"))\nparticipants$interestGroup <- factor(participants$interestGroup)\n\n# Convert category to factor\nfinancial$category <- factor(financial$category)"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#extract-year-month-from-timestamp",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#extract-year-month-from-timestamp",
    "title": "Take-home Exercise 1",
    "section": "3.2 Extract year month from timestamp",
    "text": "3.2 Extract year month from timestamp\nFrom the timestamp variable in the FinancialJournal dataset, we will also extract the relevant year and month information using as.yearmon() from zoo package.\n\n# Extract year and month\nfinancial$yearmonth <- as.yearmon(financial$timestamp)"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#remove-duplicates-in-data",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#remove-duplicates-in-data",
    "title": "Take-home Exercise 1",
    "section": "3.3 Remove duplicates in data",
    "text": "3.3 Remove duplicates in data\nChecking for duplicates using duplicated(), we find that there are 1,113 duplicated rows in the FinancialJournal dataset. Taking a glimpse into the duplicated rows, we see that for some of the participants, their monthly shelter and education expenses have been duplicated for the same timestamp.\n\n# Check for duplicates in records\ndup_rows <- duplicated(financial)\nsum(dup_rows)\n\n[1] 1113\n\n\n\n# Taking a look at all the duplicated rows\nhead(financial[dup_rows, ])\n\n# A tibble: 6 × 5\n  participantId timestamp           category  amount yearmonth\n          <dbl> <dttm>              <fct>      <dbl> <yearmon>\n1             0 2022-03-01 00:00:00 Shelter   -555.  Mar 2022 \n2             0 2022-03-01 00:00:00 Education  -38.0 Mar 2022 \n3             1 2022-03-01 00:00:00 Shelter   -555.  Mar 2022 \n4             1 2022-03-01 00:00:00 Education  -38.0 Mar 2022 \n5             2 2022-03-01 00:00:00 Shelter   -557.  Mar 2022 \n6             2 2022-03-01 00:00:00 Education  -12.8 Mar 2022 \n\n\nWe will remove the duplicates using distinct() from the dplyr package to keep only the unique data.\n\nfinancial <- distinct(financial)"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#aggregating-financial-data-of-participants",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#aggregating-financial-data-of-participants",
    "title": "Take-home Exercise 1",
    "section": "3.4 Aggregating financial data of participants",
    "text": "3.4 Aggregating financial data of participants\nCurrently, the financial data is in long format, with participantId repeated across the rows for each timestamp and category of financial transaction. For more meaningful analysis of the financial data by participants, we will prepare the data as follows:\n\nAggregate the total amount for each category of financial transaction for each yearmonth for each participant using group_by()\nNarrow down to the necessary columns using select()\nConvert the data from long to wide format using pivot_wider() to pivot the data frame so that the category column becomes the names of the new columns, the amount column becomes the values in those columns, and the values are summed up for each participantId and yearmonth combination\nReplace all NA values with 0 using replace(is.na(.), 0)\nCompute a new variable AdjustedShelter to offset the Shelter expenses with the RentAdjustments (considered as relief received in relation to Shelter expenses) using mutate()\nCompute a new variable ExcessFunds using all the income less expenses to facilitate analysis of a participant’s excess funds using mutate()\nChange all expense category (including Education, Food, Recreation and AdjustedShelter) to positive amounts for easier analysis and visualisation using mutate(across()) the columns and applying the function to multiply with -1\n\n\n# Aggregate financial data \nfinancial_updated <- financial %>%\n  group_by(participantId, yearmonth) %>%\n  select(participantId, yearmonth, category, amount) %>% \n  pivot_wider(names_from = category,\n              values_from = amount,\n              values_fn = sum) %>% \n  replace(is.na(.), 0) %>%\n  mutate(AdjustedShelter = Shelter + RentAdjustment) %>% \n  mutate(ExcessFunds = Wage + Education + Food + Recreation + AdjustedShelter) %>% \n  mutate(across(c(Education, Food, Recreation, AdjustedShelter), function(x) x*-1)) %>% \n  select(participantId, yearmonth, Wage, Education, Food, Recreation, AdjustedShelter, ExcessFunds)"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#aggregating-financial-data-per-participant-per-yearmonth",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#aggregating-financial-data-per-participant-per-yearmonth",
    "title": "Take-home Exercise 1",
    "section": "3.4 Aggregating financial data per participant per yearmonth",
    "text": "3.4 Aggregating financial data per participant per yearmonth\nCurrently, the financial data is in long format, with participantId repeated across the rows for each timestamp and category of financial transaction. For more meaningful analysis of the financial data by participants, we will prepare the data as follows:\n\nAggregate the total amount for each category of financial transaction for each yearmonth for each participant using group_by()\nNarrow down to the necessary columns using select()\nConvert the data from long to wide format using pivot_wider() to pivot the data frame so that the category column becomes the names of the new columns, the amount column becomes the values in those columns, and the values are summed up for each participantId and yearmonth combination\nReplace all NA values with 0 using replace(is.na(.), 0)\nCompute a new variable AdjustedShelter to offset the Shelter expenses with the RentAdjustments (considered as relief received in relation to Shelter expenses) using mutate()\nCompute a new variable NetIncome using all the income less expenses to facilitate analysis of a participant’s net income using mutate()\nChange all expense category (including Education, Food, Recreation and AdjustedShelter) to positive amounts for easier analysis and visualisation using mutate(across()) the columns and applying the function to multiply with -1\nSelect the final required variables using select() and round all the monetary figures to two decimal places\n\n\n# Aggregate financial data per participant per yearmonth\nfinancial_yearmth <- financial %>%\n  group_by(participantId, yearmonth) %>%\n  select(participantId, yearmonth, category, amount) %>% \n  pivot_wider(names_from = category,\n              values_from = amount,\n              values_fn = sum) %>% \n  replace(is.na(.), 0) %>%\n  mutate(AdjustedShelter = Shelter + RentAdjustment) %>% \n  mutate(NetIncome = Wage + Education + Food + Recreation + AdjustedShelter) %>% \n  mutate(across(c(Education, Food, Recreation, AdjustedShelter), function(x) x*-1)) %>%\n  select(participantId, yearmonth, Wage, Education, Food, Recreation, AdjustedShelter, NetIncome) %>%\n  mutate(across(Wage:NetIncome, function(x) round(x, 2)))\n\nBelow is a glimpse of how the aggregated data looks like:\n\nhead(financial_yearmth %>% arrange(participantId))\n\n# A tibble: 6 × 8\n# Groups:   participantId, yearmonth [6]\n  participantId yearmonth   Wage Education  Food Recreation AdjustedShelter\n          <dbl> <yearmon>  <dbl>     <dbl> <dbl>      <dbl>           <dbl>\n1             0 Mar 2022  11932.      38.0  268.       349.            555.\n2             0 Apr 2022   8637.      38.0  266.       219.            555.\n3             0 May 2022   9048.      38.0  265.       383.            555.\n4             0 Jun 2022   9048.      38.0  257.       466.            555.\n5             0 Jul 2022   8637.      38.0  270.      1070.            555.\n6             0 Aug 2022   9459.      38.0  262.       314.            555.\n# ℹ 1 more variable: NetIncome <dbl>"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#merging-participant-demographics-data-with-financial-data",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#merging-participant-demographics-data-with-financial-data",
    "title": "Take-home Exercise 1",
    "section": "3.7 Merging participant demographics data with financial data",
    "text": "3.7 Merging participant demographics data with financial data\nNext, we merge the participants dataset with the aggregated financial data using the function inner_join(), joined by participantId.\n\ncombined <- participants %>% inner_join(financial_agg, by = \"participantId\")\n\nBelow is a glimpse of how the merged data looks like:\n\nhead(combined)\n\n# A tibble: 6 × 13\n  participantId householdSize haveKids   age educationLevel      interestGroup\n          <dbl> <fct>         <lgl>    <dbl> <fct>               <fct>        \n1             0 3             TRUE        36 HighSchoolOrCollege H            \n2             1 3             TRUE        25 HighSchoolOrCollege B            \n3             2 3             TRUE        35 HighSchoolOrCollege A            \n4             3 3             TRUE        21 HighSchoolOrCollege I            \n5             4 3             TRUE        43 Bachelors           H            \n6             5 3             TRUE        32 HighSchoolOrCollege D            \n# ℹ 7 more variables: joviality <dbl>, Wage <dbl>, Education <dbl>, Food <dbl>,\n#   Recreation <dbl>, AdjustedShelter <dbl>, NetIncome <dbl>"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#dropping-participants-with-incomplete-data",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#dropping-participants-with-incomplete-data",
    "title": "Take-home Exercise 1",
    "section": "3.5 Dropping participants with incomplete data",
    "text": "3.5 Dropping participants with incomplete data\nAfter aggregating per participant per yearmonth, it was noted that there were 131 participants with only one month of transaction. It could be that there are no longer residents of the City of Engagement or they had withdrawn from the study midway.\n\n# Group by participantId and count the number of months of transactions\ncount_mths <- financial_yearmth %>% group_by(participantId) %>%\n  summarise(mths_accounted = n())\n\n# Find number of participants with only one month of transactions\nparticipants_withdrawn <- count_mths[count_mths$mths_accounted == 1, ]$participantId\nlength(participants_withdrawn)\n\n[1] 131\n\n\nFor more accurate analysis, we will exclude these 131 participants from our data by using filter() function to filter out participants who are not in the list of withdrawn participants.\n\nfinancial_yearmth <- financial_yearmth %>%\n  filter(!participantId %in% participants_withdrawn)"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#aggregating-financial-data-per-participant",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#aggregating-financial-data-per-participant",
    "title": "Take-home Exercise 1",
    "section": "3.6 Aggregating financial data per participant",
    "text": "3.6 Aggregating financial data per participant\nWhile aggregating financial data per participant per yearmonth allow us to observe the financial status of each participant over the months, we will also further aggregate the financial data per participant taking his/her total income or expenses across the entire study period (12 months).\nThe following are the steps taken:\n\nAs the financial_yearmth tibble had earlier been grouped using both participantId and yearmonth, we will need to ungroup it using the function ungroup() before we can drop the yearmonth column using select(-yearmonth)\nThen we can group by participantId and do an aggregation across the income and expense columns using summarise()\n\n\n# Aggregate financial data per participant\nfinancial_agg <- financial_yearmth %>%\n  ungroup() %>%\n  select(-yearmonth) %>%\n  group_by(participantId) %>%\n  summarise(across(Wage:NetIncome, sum)) %>%\n  mutate(across(Wage:NetIncome, function(x) round(x, 2)))\n\nBelow is a glimpse of how the aggregated data looks like:\n\nhead(financial_agg %>% arrange(participantId))\n\n# A tibble: 6 × 7\n  participantId    Wage Education  Food Recreation AdjustedShelter NetIncome\n          <dbl>   <dbl>     <dbl> <dbl>      <dbl>           <dbl>     <dbl>\n1             0 109817.      456. 3142.      4384.           6660.    95175.\n2             1  96375.      456. 3167.      6638.           6660.    79454.\n3             2  85108.      154. 3467.      4172.           6679.    70636.\n4             3  82269.      456. 3396.      4704.           6660.    67054.\n5             4 106055.      154. 3262.      6316.          12045.    84278.\n6             5  23209.      154. 4145.      5139.           7200.     6570."
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#demographics-of-the-residents",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#demographics-of-the-residents",
    "title": "Take-home Exercise 1",
    "section": "4.1 Demographics of the residents",
    "text": "4.1 Demographics of the residents\nFirst, we will have an overview understanding of the demographics of residents in the City of Engagement using the charts below.\n\n\nShow code\n# Plot haveKids\nkids <- ggplot(data = combined, aes(x = haveKids, fill = haveKids)) +\n  geom_bar() +\n  geom_text(\n    aes(label = scales::percent(after_stat(prop)), group = 1),\n    stat = \"count\",\n    vjust = 1.5) +\n  theme(axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title = element_blank(),\n        legend.position = \"none\") +\n  ggtitle(\"Proportion Having Kids\") +\n  scale_fill_manual(values = wes_palette(\"Chevalier1\"))\n  \n# Plot householdSize\nhousehold <- ggplot(data = combined, aes(x = householdSize,\n                                         fill = householdSize)) +\n  geom_bar() +\n  geom_text(\n    aes(label = scales::percent(after_stat(prop)), group = 1),\n    stat = \"count\",\n    vjust = 1.5) +\n  theme(axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title = element_blank(),\n        legend.position = \"none\") +\n  ggtitle(\"Proportion by Household Size\") +\n  scale_fill_manual(values = wes_palette(\"Chevalier1\"))\n\n# Plot educationLevel\neducation <- ggplot(data = combined, aes(x = educationLevel,\n                                         fill = educationLevel)) +\n  geom_bar() +\n  geom_text(\n    aes(label = scales::percent(after_stat(prop)), group = 1),\n    stat = \"count\",\n    vjust = 1.5) +\n  theme(axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title = element_blank(),\n        legend.position = \"none\") +\n  ggtitle(\"Proportion by Education Level\") +\n  scale_fill_manual(values = wes_palette(\"Chevalier1\"))\n\n# Plot interestGroups\ninterest <- ggplot(data = combined, aes(x = interestGroup,\n                                        fill = interestGroup)) +\n  geom_bar() +\n  geom_text(\n    aes(label = scales::percent(after_stat(prop)), group = 1),\n    stat = \"count\",\n    vjust = 1.5) +\n  theme(axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title = element_blank(),\n        legend.position = \"none\") +\n  ggtitle(\"Proportion by Interest Groups\") +\n  scale_fill_manual(values = wes_palette(\"Chevalier1\", 10, type = \"continuous\"))\n\n# Combine plots\npatch_plt1 <- (kids + household) / education / interest\npatch_plt1 + patchwork::plot_layout(guides = \"collect\") +\n    patchwork::plot_annotation(title = \"Demographics in the City of Engagement\", \n                    theme = theme(plot.title = element_text(hjust = 0.5,\n                                                            size = 18)))\n\n\n\n\n\nShow code\n# things to add: overall heading, fix proportion, fix theme, add overall figure of how many residents there are\n\n\n\n\n\n\n\n\nKey Observations\n\n\n\n\nA large proportion of the residents (72%) do not have children.\nThe proportion of household sizes are fairly even between 1 and 3. Household sizes in the City of Engagement are relatively small since the maximum household size is 3.\nThe majority of the residents have education level of at least High School or College and above.\nThe proportion across the various interest groups are fairly even."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html",
    "href": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this exercise, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this exercise we will be able to:\n\nplot statistics error bars using ggplot2,\nplot interactive error bars by combining ggplot2, plotly and DT,\ncreate advanced by using ggdist, and\ncreate hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#import-and-launch-r-packages",
    "href": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#import-and-launch-r-packages",
    "title": "Hands-on Exercise 4B",
    "section": "2.1 Import and Launch R Packages",
    "text": "2.1 Import and Launch R Packages\nThe following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for implementing cross-widget interactions (currently, linked brushing and filtering),\nggdist and ungeviz for visualising distribution and uncertainty, and\ncolorspace as toolbox for manipulating and assessing colours and palettes\n\n\npacman::p_load(tidyverse, plotly, gganimate, DT, crosstalk, ggdist, ungeviz, colorspace)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#import-data",
    "href": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#import-data",
    "title": "Hands-on Exercise 4B",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#plot-standard-error-bars-of-point-estimates",
    "href": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#plot-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4B",
    "section": "3.1 Plot standard error bars of point estimates",
    "text": "3.1 Plot standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below. We can do so using geom_errobar() from the ggplot2 package.\n\nggplot(my_sum) +\n  geom_errorbar(aes(x = RACE,\n                    ymin = mean - se,\n                    ymax = mean + se),\n                width = 0.2,\n                colour = \"black\",\n                alpha = 0.9,\n                linewidth = 0.5) +\n  geom_point(aes(x = RACE,\n                 y = mean),\n             stat = \"identity\",\n             color = \"red\",\n             size = 1.5,\n             alpha = 1) +\n  ggtitle(\"Standard Error of Mean Maths Score by Race\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe error bars are computed using the formula mean +/- se\nFor geom_point(), it is important to indicate stat = \"identity\". This argument is used to indicate that the y-axis variable represents actual data values, rather than a statistical transformation of the data"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#plot-confidence-interval-of-point-estimates",
    "href": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#plot-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4B",
    "section": "3.2 Plot confidence interval of point estimates",
    "text": "3.2 Plot confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(aes(x = reorder(RACE, -mean),\n                    ymin = mean - 1.96*se,\n                    ymax = mean + 1.96*se),\n                width = 0.2,\n                colour = \"black\",\n                alpha = 0.9,\n                linewidth = 0.5) +\n  geom_point(aes(x = RACE,\n                 y = mean),\n             stat = \"identity\",\n             color = \"red\",\n             size = 1.5,\n             alpha = 1) +\n  labs(x = \"Maths Score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe confidence intervals are computed using the formula mean +/- 1.96*se\nIn this example, we sorted the error bars using the average maths scores in descending order using reorder(RACE, -mean)\nThe labs() argument of ggplot2 is used to change the x-axis label"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#plot-interactive-error-bars",
    "href": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#plot-interactive-error-bars",
    "title": "Hands-on Exercise 4B",
    "section": "3.3 Plot interactive error bars",
    "text": "3.3 Plot interactive error bars\nThe following code chunk plots interactive error bars for the 99% confidence interval of mean maths score by race.\n\nshared_df <- SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     linewidth=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"<br>N:\", `n`,\n                                  \"<br>Avg. Scores:\", round(mean, digits = 2),\n                                  \"<br>95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /<br>maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %>%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#plot-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#plot-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4B",
    "section": "4.1 Plot uncertainty of point estimates: ggdist methods",
    "text": "4.1 Plot uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam_data %>% ggplot(aes(x = RACE,\n                         y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-Interval Plot\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, and we can check the syntax reference for more details\n\n\n\nexam_data %>% ggplot(aes(x = RACE,\n                         y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n                    .point = median,\n                    .interval = qi) +\n  labs(title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-Interval Plot\")"
  },
  {
    "objectID": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#financial-status-of-the-residents",
    "href": "Take-home Ex/Take-home_Ex01/Take-home_Ex01.html#financial-status-of-the-residents",
    "title": "Take-home Exercise 1",
    "section": "4.2 Financial Status of the Residents",
    "text": "4.2 Financial Status of the Residents\n\n4.2.1 Distribution of Income in the Population\nNext, we also want to understand the income distribution among the residents in the City of Engagement. We do so by plotting the histogram and boxplot of the income of all participants.\n\n\nShow code\nplt_box <- ggplot(data = combined, aes(x = Wage)) +\n  geom_boxplot(fill = \"#d3dddc\", color = \"#456455\") +\n  theme(axis.title = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.major = element_blank()) +\n  coord_cartesian(xlim=c(20000, 250000))\n\nplt_hist <- ggplot(data = combined, aes(x = Wage)) +\n  geom_histogram(bins = 35, fill = \"#d3dddc\", color = \"#456455\") +\n  coord_cartesian(xlim=c(20000, 250000))\n\npatch_plt2 <- plt_box / plt_hist\npatch_plt2 + patchwork::plot_layout(heights = c(1,3),\n                                    guides = \"collect\")\n\n\n\n\n\nShow code\n# things to add: annotate the mean/median, add vertical line, change colour and theme\n\n\n\n\n\n\n\n\nKey Observations\n\n\n\n\nThe income distribution is positively-skewed, with a right tail. This means that —\n\n\n\nWe will further plot the Lorenz curve below, which is a more mathematical graphical representation of the spread of income over a population. At any point in the curve, we can find a cumulative percentage of the population and see how much of the cumulative share of income they hold. The shaded area between the Lorenz curve and the straight diagonal line, which represents perfect equality in income distribution, is the Gini Coefficient. A Gini Coefficient of 0 represents perfect equality and 1 represents highest inequality.\n\n\nShow code\nggplot(data = combined, aes(x = Wage)) +\n  stat_lorenz(geom = \"polygon\", alpha = 0.65, fill = \"#d3dddc\") +\n  geom_abline(linetype = \"dashed\", linewidth = 1, color = \"#456455\") +\n  coord_fixed() +\n  theme_minimal() +\n  hrbrthemes::scale_x_percent() +\n  hrbrthemes::scale_y_percent() +\n  theme(legend.title = element_blank()) +\n  labs(x = \"Cumulative % of Population\",\n       y = \"Cumulative % of Income\") +\n  annotate_ineq(combined$Wage)\n\n\n\n\n\n\n\n\n\n\n\nKey Observation\n\n\n\nIn the City of Engagement, the Lorenz curve deviates slightly from the stright diagonal line and the Gini Coefficient is 0.27. As a guideline, a Gini Coefficient value between 0.2 - 0.3 represents relative equality. This shows that overall, there did not seem to be an issue of big income gap. It might however still be worth looking into whether income differs by any particulars groups of demographic profiles.\n\n\n\n\n4.2.2 Distribution of Income and Expenses among different Demographic Profiles\nTo enable understanding of how Income and the different Expense categories differ by the different Demographic Profiles, an interactive plot would be useful for exploration.\n\n\n\n\n\n\nInteractive Chart\n\n\n\n\nSelect from the dropdown menu to change the x-axis and y-axis\nHover over the charts to view the key statistics\n\n\n\n\n\nShow code\n# Initiate the base plot\nplot_ly(data = combined,\n        x = ~haveKids,\n        y = ~Wage,\n        type = 'box',\n        boxmean = TRUE,\n        fillcolor = \"#d3dddc\") |> \n\n# Generate plot, x-axis, and y-axis title\n  layout(title = \"Boxplot of Income/Expenses vs Selected Demographic Profiles\\n(over 12-month period)\",\n         xaxis = list(title = \"Have Kids\"),\n         yaxis = list(title = \"Income\"),\n         \n# Create dropwdown menus to allow selection of parameters on x-axis and y-axis \n         updatemenus = list(list(type = \"dropdown\",\n                                 direction = \"up\",\n                                 xanchor = \"left\",\n                                 yanchor = \"top\",\n                                 x = 1,\n                                 y = 0,\n                                 buttons = list(\n                                   list(method = \"update\",\n                                        args = list(list(x = list(combined$haveKids)),\n                                                    list(xaxis = list(title = \"Have Kids\"))),\n                                        label = \"Have Kids\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(combined$householdSize)),\n                                                    list(xaxis = list(title = \"Household Size\"))),\n                                        label = \"Household Size\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(combined$educationLevel)),\n                                                    list(xaxis = list(title = \"Education Level\"))),\n                                        label = \"Education Level\"),\n                                   list(method = \"update\",\n                                        args = list(list(x = list(combined$interestGroup)),\n                                                    list(xaxis = list(title = \"Interest Group\"))),\n                                        label = \"Interest Group\")\n                                   )\n                                 ),\n                            \n                            list(type = \"dropdown\",\n                                 xanchor = \"left\",\n                                 yanchor = \"top\",\n                                 x = 0.04,\n                                 y = 0.95,\n                                 buttons = list(\n                                   list(method = \"update\",\n                                        args = list(list(y = list(combined$Wage)),\n                                                    list(yaxis = list(title = \"Income\"))),\n                                        label = \"Income\"),\n                                   list(method = \"update\",\n                                        args = list(list(y = list(combined$Food)),\n                                                    list(yaxis = list(title = \"Food\"))),\n                                        label = \"Food\"),\n                                   list(method = \"update\",\n                                        args = list(list(y = list(combined$Recreation)),\n                                                    list(yaxis = list(title = \"Recreation\"))),\n                                        label = \"Recreation\"),\n                                   list(method = \"update\",\n                                        args = list(list(y = list(combined$AdjustedShelter)),\n                                                    list(yaxis = list(title = \"Shelter\"))),\n                                        label = \"Shelter\"),\n                                   list(method = \"update\",\n                                        args = list(list(y = list(combined$Education)),\n                                                    list(yaxis = list(title = \"Education\"))),\n                                        label = \"Education\")\n                                   )\n                                 )\n                            )\n         )"
  }
]