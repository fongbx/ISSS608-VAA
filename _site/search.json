[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications homepage. In this website, you will find coursework and exercises completed for this course."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\nWe will import Exan_data.csv into the R environment using read_csv() function of readr package. The dataset comprises of year end examination grades of a cohort of Primary 3 students.\n\nexam_data <- read_csv('data/Exam_data.csv')\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe will examine the imported data below.\n\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr>"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#understand-grammer-of-graphics",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#understand-grammer-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "Understand Grammer of Graphics",
    "text": "Understand Grammer of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics. Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nggplot2 is an implementation of Grammar of Graphics. A short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: data",
    "text": "Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\nggplot() initialises a ggplot object and a blank canvas appears. The data argument defines the dataset to be used for plotting."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS))\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: geom",
    "text": "Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\nGeometric Objects: geom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nGeometric Objects: geom_dotplot()\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nNote: The y-scale is not very useful, in fact misleading.\nWe will modify the chart using the below two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL,         # removes y-axis label\n                     breaks=NULL)  # removes y-axis ticks\n\n\n\n\n\n\nGeometric Objects: geom_histogram()\nIn geom_histogram(), the default number of bins is 30.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nModify a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue colour, and\ncolour argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n\n\n\n\n\n\nModify a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n*Note: This approach can be used to change colour, fill and alpha of the geometric.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color='grey30')\n\n\n\n\n\n\nGeometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density()\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_density()\n\n\n\n\n\n\nGeometric Objects: geom_boxplot()\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot()\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nGeometric Objects: geom_violin()\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_violin()\n\n\n\n\n\n\nGeometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\ngeom objects can be combined\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(position='jitter',\n             size=0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot()\n\n\n\n\n\n\nWorking with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  stat_summary(geom='point',\n               fun='mean',\n               color='red',\n               size=4)\n\n\n\n\n\n\nWorking with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(stat='summary',\n             fun='mean',\n             color='red',\n             size=4)\n\n\n\n\n\n\nAdding a best fit curve on a scatterplot\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n*Note: The default method used is loess.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: Facets",
    "text": "Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\nWorking with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. The default will display the panels in a grid shape (in this case 3x3) but we can pass in the arguments of nrow and ncol for customisation. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nNote that facet_wrap() function will only produce plots for the combinations of variables that have values, which means it won’t produce any empty plots.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\nfacet_wrap(~ CLASS, nrow=2)\n\n\n\n\n\n\nWorking with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data. Compared with facet_wrap(), we cannot specify the nrow and ncol, and there would always be only one row or only one column.\nNote that the facet_grid() function will also produce a grid of plots for each combination of variables that you specify, even if some plots are empty.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out)\ncoord_flip(): a cartesian system with the x and y flipped\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot)\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps\n\n\nWorking with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\nChanging the x and y axis range\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixes both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2: themes",
    "text": "Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\nWorking with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nBelow plots the horizontal bar chart using theme_classic().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nBelow plots the horizontal bar chart using theme_m().\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 01",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv('data/Exam_data.csv')\n\nWe will now examine the data further.\n\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\nstr(exam_data)\n\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nThe variables CLASS, GENDER and RACE are currently character data format. We will change them to factor.\n\nexam_data$CLASS <- as.factor(exam_data$CLASS)\nexam_data$GENDER <- as.factor(exam_data$GENDER)\nexam_data$RACE <- as.factor(exam_data$RACE)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-1---working-with-theme",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-1---working-with-theme",
    "title": "In-class Exercise 01",
    "section": "Exercise 1 - Working with theme",
    "text": "Exercise 1 - Working with theme\nFor more information on adjusting the theme, refer here.\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill='lightblue', colour='lightblue',\n                                    size=0.5, linetype='solid'),\n    panel.grid.major = element_line(size=0.5, linetype='solid', colour='white'),\n    panel.grid.minor = element_line(size=0.5, linetype='solid', colour='white'))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2---designing-data-driven-graphics-for-analysis-i",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2---designing-data-driven-graphics-for-analysis-i",
    "title": "In-class Exercise 01",
    "section": "Exercise 2 - Designing Data-Driven Graphics for Analysis I",
    "text": "Exercise 2 - Designing Data-Driven Graphics for Analysis I\n\nOriginal DesignImproved Design\n\n\nIn the original chart, there are the following issues:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequency\nFor static graph, frequency values should be added to provide additional information\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nBelow is the makeover of the chart. There are a few ways to plot the same chart.\nAlternative 1 - Processing before plotting\n\nWe need to include stat='identity', which is basically telling ggplot2 you will provide the y-values for the barplot, rather than counting the aggregate number of rows for each x value, which is the default stat=count\n\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(count=n()) %>% \n  mutate(pct = round((count/sum(count))*100,1)) %>% # we can also use prop.table(count) to get pct\n  # if we do an arrange(desc(count)) before ggplot, there is no need for reorder below\n  ggplot(aes(x=reorder(RACE, desc(count)), y=count)) +\n    geom_bar(stat='identity') +\n    ylim(0,220) +\n    labs(x='Race', y='No. of\\nPupils') +\n    geom_text(aes(label=paste0(count, ', ', pct, '%'), vjust = -0.5)) +\n    theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 2 - Processing during plotting\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE, function(x) -length(x)))) + # if ascending order remove minus\n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 3 - Using forcats package\n\nlibrary(forcats)\n\nggplot(data=exam_data,\n       # for ascending order use fct_rev(fct_infreq(RACE))\n       aes(x = fct_infreq(RACE))) + \n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3---designing-data-driven-graphics-for-analysis-ii",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3---designing-data-driven-graphics-for-analysis-ii",
    "title": "In-class Exercise 01",
    "section": "Exercise 3 - Designing Data-Driven Graphics for Analysis II",
    "text": "Exercise 3 - Designing Data-Driven Graphics for Analysis II\n\nOriginal DesignImproved Design"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2---improving-design-i",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2---improving-design-i",
    "title": "In-class Exercise 01",
    "section": "Exercise 2 - Improving Design I",
    "text": "Exercise 2 - Improving Design I\n\nOriginal DesignImproved Design (Alt 1)Improved Design (Alt 2)Improved Design (Alt 3)\n\n\nIn the original chart, there are the following issues:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequency\nFor static graph, frequency values should be added to provide additional information\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nAlternative 1 - Processing before plotting\nWe need to include stat='identity', which is basically telling ggplot2 you will provide the y-values for the barplot, rather than counting the aggregate number of rows for each x value, which is the default stat=count\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(count=n()) %>% \n  mutate(pct = round((count/sum(count))*100,1)) %>% # we can also use prop.table(count) to get pct\n  # if we do an arrange(desc(count)) before ggplot, there is no need for reorder below\n  ggplot(aes(x=reorder(RACE, desc(count)), y=count)) +\n    geom_bar(stat='identity') +\n    ylim(0,220) +\n    labs(x='Race', y='No. of\\nPupils') +\n    geom_text(aes(label=paste0(count, ', ', pct, '%'), vjust = -0.5)) +\n    theme(axis.title.y=element_text(angle=0))\n\n\n\n\n\n\nAlternative 2 - Processing during plotting\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE, function(x) -length(x)))) + # if ascending order remove minus\n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\n\n\nAlternative 3 - Using forcats package\n\nlibrary(forcats)\n\nggplot(data=exam_data,\n       # for ascending order use fct_rev(fct_infreq(RACE))\n       aes(x = fct_infreq(RACE))) + \n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\n\n\n\n\nOriginal DesignImproved Design\n\n\nIn the original chart, there are the following issues:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequency\nFor static graph, frequency values should be added to provide additional information\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nBelow is the makeover of the chart. There are a few ways to plot the same chart.\nAlternative 1 - Processing before plotting\n\nWe need to include stat='identity', which is basically telling ggplot2 you will provide the y-values for the barplot, rather than counting the aggregate number of rows for each x value, which is the default stat=count\n\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(count=n()) %>% \n  mutate(pct = round((count/sum(count))*100,1)) %>% # we can also use prop.table(count) to get pct\n  # if we do an arrange(desc(count)) before ggplot, there is no need for reorder below\n  ggplot(aes(x=reorder(RACE, desc(count)), y=count)) +\n    geom_bar(stat='identity') +\n    ylim(0,220) +\n    labs(x='Race', y='No. of\\nPupils') +\n    geom_text(aes(label=paste0(count, ', ', pct, '%'), vjust = -0.5)) +\n    theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 2 - Processing during plotting\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE, function(x) -length(x)))) + # if ascending order remove minus\n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 3 - Using forcats package\n\nlibrary(forcats)\n\nggplot(data=exam_data,\n       # for ascending order use fct_rev(fct_infreq(RACE))\n       aes(x = fct_infreq(RACE))) + \n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3---improving-design-ii",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3---improving-design-ii",
    "title": "In-class Exercise 01",
    "section": "Exercise 3 - Improving Design II",
    "text": "Exercise 3 - Improving Design II\n\nOriginal DesignImproved Design"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-1",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-1",
    "title": "In-class Exercise 01",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nOriginal DesignImproved Design\n\n\nWe can beautify the chart by adjusting the theme.\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nBelow is an example of how we can adjust the theme of the chart. Here, we will change the colours of plot panel background to light blue and the colour of grid lines to white.\nFor more information on adjusting the theme, refer here.\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill='lightblue', colour='lightblue',\n                                    size=0.5, linetype='solid'),\n    panel.grid.major = element_line(size=0.5, linetype='solid', colour='white'),\n    panel.grid.minor = element_line(size=0.5, linetype='solid', colour='white'))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-2",
    "title": "In-class Exercise 01",
    "section": "Exercise 2",
    "text": "Exercise 2\n\nOriginal DesignImproved Design\n\n\nIn the original chart, there are the following issues:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequency\nFor static graph, frequency values should be added to provide additional information\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nBelow is the makeover of the chart. There are a few ways to plot the same chart.\nAlternative 1 - Processing before plotting\n\nWe need to include stat='identity', which is basically telling ggplot2 you will provide the y-values for the barplot, rather than counting the aggregate number of rows for each x value, which is the default stat=count\n\n\nexam_data %>%\n  group_by(RACE) %>% \n  summarise(count=n()) %>% \n  mutate(pct = round((count/sum(count))*100,1)) %>% # we can also use prop.table(count) to get pct\n  # if we do an arrange(desc(count)) before ggplot, there is no need for reorder below\n  ggplot(aes(x=reorder(RACE, desc(count)), y=count)) +\n    geom_bar(stat='identity') +\n    ylim(0,220) +\n    labs(x='Race', y='No. of\\nPupils') +\n    geom_text(aes(label=paste0(count, ', ', pct, '%'), vjust = -0.5)) +\n    theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 2 - Processing during plotting\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE, function(x) -length(x)))) + # if ascending order remove minus\n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\nAlternative 3 - Using forcats package\n\nlibrary(forcats)\n\nggplot(data=exam_data,\n       # for ascending order use fct_rev(fct_infreq(RACE))\n       aes(x = fct_infreq(RACE))) + \n  geom_bar() +\n  ylim(0,220) +\n  labs(x='Race', y='No. of\\nPupils') +\n  geom_text(stat='count',\n            aes(label=paste0(after_stat(count), ', ',\n                             round(after_stat(count)/\n                                     sum(after_stat(count))*100, 1), '%')),\n            vjust=-0.5) +\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-3",
    "title": "In-class Exercise 01",
    "section": "Exercise 3",
    "text": "Exercise 3\n\nOriginal DesignImproved Design\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20)\n\n\n\n\n\n\nWe will improve the design with the following:\n\nAdding mean and median lines on the histogram plot\n\nChange fill colour and line colour\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20, color='black', fill='lightblue') +\n  geom_vline(xintercept=mean(exam_data$MATHS, na.rm=T),\n             color='red', linetype='dashed', size=1) +\n  geom_vline(xintercept=median(exam_data$MATHS, na.rm=T),\n             color='blue', linetype='dashed', size=1)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-4",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-4",
    "title": "In-class Exercise 01",
    "section": "Exercise 4",
    "text": "Exercise 4\n\nOriginal DesignImproved Design\n\n\nThe below histograms are not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\n\nggplot(data=exam_data,\n       aes(x=ENGLISH)) +\n  geom_histogram() +\n  facet_wrap(~ GENDER)\n\n\n\n\n\n\nWe will create a makeover as shown below. The background histograms show the distribution of English scores of all pupils.\n\nexam_data_wo_gender <- exam_data[,-3] # remove column 3\n\nggplot(data=exam_data,\n       aes(x=ENGLISH, fill=GENDER)) +\n  # first hist plots the background, second hist plots the foreground\n  geom_histogram(data=exam_data_wo_gender, fill='grey', alpha=0.5) +\n  geom_histogram(colour='black') +\n  facet_grid(~ GENDER) +\n  guides(fill=FALSE) + # removes the legend\n  theme_bw()"
  },
  {
    "objectID": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-5",
    "href": "In-class Ex/In-class_Ex01/In-class_Ex01.html#exercise-5",
    "title": "In-class Exercise 01",
    "section": "Exercise 5",
    "text": "Exercise 5\n\nOriginal DesignImproved Design\n\n\nThe original chart shows minimal information.\n\nggplot(data=exam_data, aes(x=MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nWe will improve the design with the following:\n\nChanging to equal axis\nIncluding guides to inform where the passing grades are\n\n\nggplot(data=exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  geom_vline(xintercept=50, linetype='dashed', colour='grey60',\n             size=1.5, alpha=0.8) +\n  geom_hline(yintercept=50, linetype='dashed', colour='grey60',\n             size=1.5, alpha=0.8) +\n  theme(aspect.ratio=1) # enables plot to be square-shaped"
  }
]